openapi: 3.0.1
info:
  title: RESTful Web Services API
  description: Universal Controller supports a RESTful-based web services API that allows you to perform multiple operations.
  version: 7.7.0.0
externalDocs:
  url: 'https://doc.stonebranch.com/wiki/spaces/UC77/pages/794498767/RESTful+Web+Services+API'
servers:
  - url: 'https://ps1.stonebranchdev.cloud/'
  - url: ''
    description: ''
security:
  - basicAuth: []
    bearerAuth: []
paths:
  /resources/agentcluster:
    get:
      tags:
        - Agent Cluster
      summary: Read an Agent Cluster
      description: Retrieves information on a specific Agent Cluster.
      operationId: getAgentCluster
      parameters:
        - name: agentclusterid
          in: query
          description: ID used within the Controller to identify this Agent Cluster.
          schema:
            type: string
        - name: agentclustername
          in: query
          description: Name used within the Controller to identify this Agent Cluster.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentClusterWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/AgentClusterWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Agent cluster value missing. Required either agentclustername or agentclusterid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Agent cluster with id "agentclusterid" does not exist.
    put:
      tags:
        - Agent Cluster
      summary: Modify an Agent Cluster
      description: Modifies the Agent Cluster specified by the sysId.
      operationId: updateAgentCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentClusterWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/AgentClusterWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the Agent Cluster with id "agentclusterid" to version "version".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Agent cluster with id "agentclusterid" does not exist.
    post:
      tags:
        - Agent Cluster
      summary: Create an Agent Cluster
      description: Creates a new Agent Cluster.
      operationId: createAgentCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentClusterWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/AgentClusterWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the Agent Cluster with id "agentclusterid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create Agent Cluster failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Agent Cluster
      summary: Delete an Agent Cluster
      description: Deletes a specific Agent Cluster.
      operationId: deleteAgentCluster
      parameters:
        - name: agentclusterid
          in: query
          description: Name used within the Controller to identify this Agent Cluster.
          schema:
            type: string
        - name: agentclustername
          in: query
          description: ID used within the Controller to identify this Agent Cluster.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Agent Cluster deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either agentclustername or agentclusterid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Agent cluster with id "agentclusterid" does not exist.
  /resources/agentcluster/list:
    get:
      tags:
        - Agent Cluster
      summary: List Agent Clusters
      description: Retrieves information on all Agent Clusters.
      operationId: getAgentClusters
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
      security: []
  /resources/agentcluster/listadv:
    get:
      tags:
        - Agent Cluster
      summary: List Agent Clusters - Advanced
      description: Retrieves Agent Cluster details using specific query parameters.
      operationId: getAgentClustersAdvanced
      parameters:
        - name: agentclustername
          in: query
          description: Name used within the Controller to identify this Agent Cluster.
          schema:
            type: string
        - name: type
          in: query
          description: Type of Agent Cluster.
          schema:
            type: string
            enum:
              - Windows
              - Linux/Unix
        - name: businessServices
          in: query
          description: Business Services that this Agent belongs to.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: 'Cannot find business service: "businessServices".'
  /resources/agentcluster/agent:
    get:
      tags:
        - Agent Cluster
      summary: Return an Agent from an Agent Cluster
      description: Retrieves information on a specific Agent from an Agent Cluster for which a Distribution method of Any or Lowest CPU Utilization is specified.
      operationId: getSelectedAgent
      parameters:
        - name: agentclustername
          in: query
          description: Name used within the Controller to identify this Agent Cluster.
          required: true
          schema:
            type: string
        - name: ignoreexecutionlimit
          in: query
          description: Specification to use or ignore the task execution limit.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentSimpleWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/AgentSimpleWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Agent cluster "agentclustername" not found.
  /resources/agentcluster/resolve:
    post:
      tags:
        - Agent Cluster
      summary: Resolve an Agent Cluster
      description: Resolves the Network Alias for the specified Agent Cluster.
      operationId: resolveCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveAgentClusterWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ResolveAgentClusterWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '404':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/agentcluster/resume:
    post:
      tags:
        - Agent Cluster
      summary: Resume an Agent Cluster
      description: Resumes the specified Agent Cluster.
      operationId: resumeCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeAgentClusterWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ResumeAgentClusterWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/agentcluster/taskexecutionlimit:
    post:
      tags:
        - Agent Cluster
      summary: Set an Agent Cluster Task Execution Limit
      description: Sets the task execution limit for the specified Agent Cluster.
      operationId: setClusterTaskExecutionLimit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAgentClusterTaskExecutionLimitWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SetAgentClusterTaskExecutionLimitWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/agentcluster/suspend:
    post:
      tags:
        - Agent Cluster
      summary: Suspend an Agent Cluster
      description: Suspends the specified Agent Cluster.
      operationId: suspendCluster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuspendAgentClusterWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SuspendAgentClusterWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/agent:
    get:
      tags:
        - Agent
      summary: Read an Agent
      description: Retrieves information on a specific Agent.
      operationId: getAgent
      parameters:
        - name: agentid
          in: query
          description: ID used within the Controller to identify this Agent.
          schema:
            type: string
        - name: agentname
          in: query
          description: Name used within the Controller to identify this Agent.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/AgentWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either agentname or agentid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Agent with id "agentid" does not exist.
    put:
      tags:
        - Agent
      summary: Modify an Agent
      description: Modifies the Agent specified by the sysId.
      operationId: updateAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/AgentWsData'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AgentWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Agent with id "agentid" does not exist.
    delete:
      tags:
        - Agent
      summary: Delete an Agent
      description: Deletes the specified Agent.
      operationId: deleteAgent
      parameters:
        - name: agentid
          in: query
          description: ID used within the Controller to identify this Agent.
          schema:
            type: string
        - name: agentname
          in: query
          description: Name used within the Controller to identify this Agent.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Agent deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either agentname or agentid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Agent with id "agentid" does not exist.
  /resources/agent/list:
    get:
      tags:
        - Agent
      summary: List Agents
      description: Retrieves information on all agents.
      operationId: getAgents
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/agent/listadv:
    get:
      tags:
        - Agent
      summary: List Agents - Advanced
      description: Retrieves Agent details using specific query parameters.
      operationId: getAgentsAdvanced
      parameters:
        - name: agentname
          in: query
          description: Name used within the Controller to identify this Agent.
          schema:
            type: string
        - name: type
          in: query
          description: Type of Agent.
          schema:
            type: string
            enum:
              - Windows
              - Linux/Unix
              - z/OS
        - name: businessServices
          in: query
          description: Business Services that this Agent belongs to.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: 'Cannot find business service: "businessServices".'
  /resources/agent/ops-resume-agent:
    post:
      tags:
        - Agent
      summary: Resume an Agent
      description: Resumes the specified agent.
      operationId: resumeAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeAgentWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ResumeAgentWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/agent/ops-resume-agent-cluster-membership:
    post:
      tags:
        - Agent
        - Agent Cluster
      summary: Resume an Agent Cluster Membership
      description: Resumes the specified agent cluster membership.
      operationId: resumeAgentClusterMembership
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeAgentClusterMembershipWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ResumeAgentClusterMembershipWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/agent/ops-set-agent-task-execution-limit:
    post:
      tags:
        - Agent
      summary: Set an Agent Task Execution Limit
      description: Sets the task execution limit for the specified agent.
      operationId: setAgentTaskExecutionLimit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAgentTaskExecutionLimitWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SetAgentTaskExecutionLimitWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/agent/ops-suspend-agent:
    post:
      tags:
        - Agent
      summary: Suspend an Agent
      description: Suspends the specified agent.
      operationId: suspendAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuspendAgentWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SuspendAgentWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/agent/ops-suspend-agent-cluster-membership:
    post:
      tags:
        - Agent
        - Agent Cluster
      summary: Suspend an Agent Cluster Membership
      description: Suspends the specified agent cluster membership.
      operationId: suspendAgentClusterMembership
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuspendAgentClusterMembershipWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SuspendAgentClusterMembershipWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/audit/list:
    post:
      tags:
        - Audit
      summary: List Audit Records
      description: Retrieve the audit details using a specific filter.
      operationId: listAudit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditFilterWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/AuditFilterWsData'
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/bundle/promote:
    post:
      tags:
        - Bundle
        - Promotion
      summary: Promote a Bundle or Schedule a Bundle Promotion
      description: Promote a Bundle or schedule the promotion of a Bundle.
      operationId: promote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BundlePromoteWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/BundlePromoteWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/bundle:
    get:
      tags:
        - Bundle
      summary: Read a Bundle
      description: Retrieve Bundle details using specific query parameters.
      operationId: getBundle
      parameters:
        - name: bundleid
          in: query
          description: ID used within the Controller to identify this Bundle.
          schema:
            type: string
        - name: bundlename
          in: query
          description: Name used within the Controller to identify this Bundle.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundleWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/BundleWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either bundlename or bundleid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A bundle with id "bundleid" does not exist.
    put:
      tags:
        - Bundle
      summary: Modify a Bundle
      description: Modifies the Bundle specified by the sysId.
      operationId: updateBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BundleWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/BundleWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the Bundle with id "bundleid" to version "version".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A Bundle with id "bundleid" does not exist.
    post:
      tags:
        - Bundle
      summary: Create a Bundle
      description: Creates a Bundle.
      operationId: createBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BundleWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/BundleWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the bundle with id "bundleid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create bundle failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Bundle
      summary: Delete a Bundle
      description: Deletes the specified Bundle.
      operationId: deleteBundle
      parameters:
        - name: bundleid
          in: query
          description: ID used within the Controller to identify this Bundle.
          schema:
            type: string
        - name: bundlename
          in: query
          description: Name used within the Controller to identify this Bundle.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Bundle deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either bundlename or bundleid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A Bundle with id "bundleid" does not exist.
  /resources/bundle/bybusinessservices:
    post:
      tags:
        - Bundle
      summary: Create a Bundle by Business Services
      description: Creates a Bundle by Business Services.
      operationId: createBundleByBusinessServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BundleRequestWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/BundleRequestWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created bundle "bundlename" with 1 item(s).
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/bundle/bydate:
    post:
      tags:
        - Bundle
      summary: Create a Bundle by Date
      description: Creates a Bundle by Date.
      operationId: createBundleByDate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BundleRequestWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/BundleRequestWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created bundle "bundlename" with 1 item(s).
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/bundle/report:
    get:
      tags:
        - Bundle
      summary: Read a Bundle Report
      description: Retrieve Bundle Report details using specific query parameters.
      operationId: getBundleReport
      parameters:
        - name: bundleid
          in: query
          description: ID used within the Controller to identify this Bundle.
          schema:
            type: string
        - name: bundlename
          in: query
          description: Name used within the Controller to identify this Bundle.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either bundlename or bundleid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A bundle with id "bundleid" does not exist.
  /resources/bundle/list:
    get:
      tags:
        - Bundle
      summary: List Bundles
      description: Retrieves information on all Bundles.
      operationId: listBundles
      parameters:
        - name: bundlename
          in: query
          description: Name used within the Controller to identify this Bundle.
          schema:
            type: string
        - name: businessServices
          in: query
          description: Business Services that the bundle belongs to.
          schema:
            type: string
        - name: defaultPromotionTarget
          in: query
          description: Default Promotion Target for this bundle.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: 'Cannot find business service: "businessServices".'
        '404':
          description: Not Found
          content:
            text/plain: {}
  /resources/businessservice:
    get:
      tags:
        - Business Service
      summary: Read a Business Service
      description: Retrieves information on a specific Business Service.
      operationId: getBusinessService
      parameters:
        - name: busserviceid
          in: query
          description: ID used within the Controller to identify this Business Service.
          schema:
            type: string
        - name: busservicename
          in: query
          description: Name used within the Controller to identify this Business Service.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessServiceWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/BusinessServiceWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either busservicename or busserviceid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A business service with name "busservicename" does not exist.
    put:
      tags:
        - Business Service
      summary: Modify a Business Service
      description: Modifies the Business Service specified by the sysId.
      operationId: updateBusinessService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessServiceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/BusinessServiceWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the Business Service with id "busserviceid" to version "version".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A Business Service with id "busserviceid" does not exist.
    post:
      tags:
        - Business Service
      summary: Create a Business Service
      description: Creates a Business Service.
      operationId: createBusinessService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessServiceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/BusinessServiceWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the Business Service with id "busserviceid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create Business Service failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Business Service
      summary: Delete a Business Service
      description: Deletes a Business Service.
      operationId: deleteBusinessService
      parameters:
        - name: busserviceid
          in: query
          description: ID used within the Controller to identify this Business Service.
          schema:
            type: string
        - name: busservicename
          in: query
          description: Name used within the Controller to identify this Business Service.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Business Service deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either busservicename or busserviceid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A Bundle with id "busserviceid" does not exist.
  /resources/businessservice/list:
    get:
      tags:
        - Business Service
      summary: List Business Services
      description: Retrieves information on all Business Services.
      operationId: listBusinessServices
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/calendar/customdays:
    get:
      tags:
        - Calendar
        - Custom Day
      summary: Read All Custom Days of a Calendar
      description: Retrieves information on all Custom Days of a specific Calendar.
      operationId: getCustomDays
      parameters:
        - name: calendarid
          in: query
          description: ID used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify this Calendar.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify calendarname and calendarid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A calendar with id "calendarid" does not exist.
    post:
      tags:
        - Calendar
        - Custom Day
      summary: Add an Existing Custom Day to a Calendar
      description: Adds the specified Custom Day to the specified Calendar.
      operationId: addCustomDay
      parameters:
        - name: calendarid
          in: query
          description: ID used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: customdayid
          in: query
          description: ID used within the Controller to identify this Custom Day.
          schema:
            type: string
        - name: customdayname
          in: query
          description: Name used within the Controller to identify this Custom Day.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Custom day "customdayname" successfully added to the calendar "calendarname".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Custom Day "customdayname" is already in the Calendar "calendarname".
        '404':
          description: Not Found
          content:
            text/plain:
              example: A calendar with name "calendarName" does not exist.
    delete:
      tags:
        - Calendar
        - Custom Day
      summary: Remove a Custom Day from a Calendar
      description: Removes the specified Custom Day from a specific Calendar.
      operationId: removeCustomDay
      parameters:
        - name: calendarid
          in: query
          description: ID used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: customdayid
          in: query
          description: ID used within the Controller to identify this Custom Day.
          schema:
            type: string
        - name: customdayname
          in: query
          description: Name used within the Controller to identify this Custom Day.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully removed custom day "customdayname" from calendar "calendarname".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Custom day "customdayname" does not belong to the calendar "calendarname".
        '404':
          description: Not Found
          content:
            text/plain:
              example: A calendar with name "calendarname" does not exist.
  /resources/calendar:
    get:
      tags:
        - Calendar
      summary: Read a Calendar
      description: Retrieves information on a specific Calendar.
      operationId: getCalendar
      parameters:
        - name: calendarid
          in: query
          description: ID used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify this Calendar.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CalendarWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify calendarname and calendarid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A calendar with id "calendarid" does not exist.
    put:
      tags:
        - Calendar
      summary: Modify a Calendar
      description: Modifies the Calendar specified by the sysId.
      operationId: updateCalendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/CalendarWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the calendar with id "calendarid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A Calendar with id "calendarid" does not exist.
    post:
      tags:
        - Calendar
      summary: Create a Calendar
      description: Creates a new Calendar.
      operationId: createCalendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/CalendarWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the calendar with id "calendarid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create Calendar failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Calendar
      summary: Delete a Calendar
      description: Deletes the specified Calendar.
      operationId: deleteCalendar
      parameters:
        - name: calendarid
          in: query
          description: ID used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify this Calendar.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Calendar deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either calendarname or calendarid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A calendar with id "calendarid" does not exist.
  /resources/calendar/list:
    get:
      tags:
        - Calendar
      summary: List Calendars
      description: Retrieves information on all Calendars.
      operationId: listCalendars
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/calendar/localcustomdays/qualifyingdates:
    get:
      tags:
        - Calendar
      summary: List Local Custom Day Qualifying Dates
      description: Retrieves information on Qualifying Dates for a specific Local Custom Day.
      operationId: listQualifyingDatesForLocalCustomDay
      parameters:
        - name: customdayname
          in: query
          description: Name used within the Controller to identify this Local Custom Day.
          required: true
          schema:
            type: string
        - name: calendarid
          in: query
          description: ID used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify this Calendar.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify calendarname and calendarid at the same time.
  /resources/calendar/localcustomdays/qualifyingperiods:
    get:
      tags:
        - Calendar
      summary: List Local Custom Day Qualifying Periods
      description: Retrieves information on Qualifying Periods for a specific Local Custom Day.
      operationId: listQualifyingPeriods
      parameters:
        - name: customdayname
          in: query
          description: Name used within the Controller to identify this Local Custom Day.
          required: true
          schema:
            type: string
        - name: calendarid
          in: query
          description: ID used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify this Calendar.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify calendarname and calendarid at the same time.
  /resources/clusternode/info:
    get:
      tags:
        - Cluster Node
      summary: Read Current Cluster Node
      description: Retrieves information on the current Cluster Node.
      operationId: getClusterNode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNodeWsData'
            text/xml:
              schema:
                $ref: '#/components/schemas/ClusterNodeWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/ClusterNodeWsData'
        '400':
          description: Bad Request
          content:
            text/plain: {}
        '404':
          description: Not Found
          content:
            text/plain: {}
  /resources/clusternode/list:
    get:
      tags:
        - Cluster Node
      summary: List All Cluster Nodes
      description: Retrieves information on all Cluster Nodes.
      operationId: getClusterNodes
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/credential/ops-change-password:
    post:
      tags:
        - Credential
        - Password
      summary: Change Runtime Password
      description: Changes the runtime password of the Credential based on name.
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeCredentialsPasswordWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ChangeCredentialsPasswordWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/credential:
    get:
      tags:
        - Credential
      summary: Read a Credential
      description: Retrieves information on a specific Credential.
      operationId: getCredential
      parameters:
        - name: credentialid
          in: query
          description: ID used within the Controller to identify this Credential.
          schema:
            type: string
        - name: credentialname
          in: query
          description: Name used within the Controller to identify this Credential.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CredentialWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either credentialname or credentialid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A credential with id "credentialid" does not exist.
    put:
      tags:
        - Credential
      summary: Modify a Credential
      description: Modifies the Credential specified by the sysId.
      operationId: updateCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/CredentialWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the credential with id "credentialid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A credential with id "credentialid" does not exist.
    post:
      tags:
        - Credential
      summary: Create a Credential
      description: Creates a Credential.
      operationId: createCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/CredentialWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the credential with id "credentialid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create credential failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Credential
      summary: Delete a Credential
      description: Deletes the specified Credential.
      operationId: deleteCredential
      parameters:
        - name: credentialid
          in: query
          description: ID used within the Controller to identify this Credential.
          schema:
            type: string
        - name: credentialname
          in: query
          description: Name used within the Controller to identify this Credential.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Credential deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either credentialname or credentialid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A credential with id "credentialid" does not exist.
  /resources/credential/list:
    get:
      tags:
        - Credential
      summary: List Credentials
      description: Retrieves information on all Credentials.
      operationId: listCredentials
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/credential/testprovider:
    post:
      tags:
        - Credential
      summary: Test Provider
      description: Run the Test Provider command for the specified Credentials.
      operationId: testProvider
      parameters:
        - name: credentialid
          in: query
          schema:
            type: string
        - name: credentialname
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: A credential with id "credentialid" does not exist.
  /resources/customday:
    get:
      tags:
        - Custom Day
      summary: Read a Custom Day
      description: Retrieves information on a specific Custom Day.
      operationId: getCustomDay
      parameters:
        - name: customdayid
          in: query
          description: ID used within the Controller to identify this Custom Day.
          schema:
            type: string
        - name: customdayname
          in: query
          description: Name used within the Controller to identify this Custom Day.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomDayWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CustomDayWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either customdayname or customdayid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A custom day with id "customdayid" does not exist.
    put:
      tags:
        - Custom Day
      summary: Modify a Custom Day
      description: Modifies the Custom Day specified by the sysId.
      operationId: updateCustomDay
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomDayWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/CustomDayWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the custom day with id "customdayid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A custom day with id "customdayid" does not exist.
    post:
      tags:
        - Custom Day
      summary: Create a Custom Day
      description: Creates a new Custom Day.
      operationId: createCustomDay
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomDayWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/CustomDayWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the custom day with id "customdayid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create custom day failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Custom Day
      summary: Delete a Custom Day
      description: Deletes a specific Custom Day.
      operationId: deleteCustomDay
      parameters:
        - name: customdayid
          in: query
          description: ID used within the Controller to identify this Custom Day.
          schema:
            type: string
        - name: customdayname
          in: query
          description: Name used within the Controller to identify this Custom Day.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Custom day deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either customdayname or customdayid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A custom day with id "customdayid" does not exist.
  /resources/customday/list:
    get:
      tags:
        - Custom Day
      summary: List Custom Days
      description: Retrieves information on all Custom Days.
      operationId: listCustomDays
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/customday/qualifyingdates:
    get:
      tags:
        - Custom Day
      summary: List Custom Day Qualifying Dates
      description: Retrieves information on Qualifying Dates for a specific Custom Day.
      operationId: listQualifyingDates
      parameters:
        - name: customdayid
          in: query
          description: ID used within the Controller to identify this Custom Day.
          schema:
            type: string
        - name: customdayname
          in: query
          description: Name used within the Controller to identify this Custom Day.
          schema:
            type: string
        - name: calendarid
          in: query
          description: ID used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify this Calendar.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify customdayname and customdayid at the same time.
  /resources/customday/qualifyingperiods:
    get:
      tags:
        - Custom Day
      summary: List Custom Day Qualifying Periods
      description: Retrieves information on Qualifying Periods for a specific Custom Day.
      operationId: listQualifyingPeriods_1
      parameters:
        - name: customdayid
          in: query
          description: ID used within the Controller to identify this Custom Day.
          schema:
            type: string
        - name: customdayname
          in: query
          description: Name used within the Controller to identify this Custom Day.
          schema:
            type: string
        - name: calendarid
          in: query
          description: ID used within the Controller to identify this Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify this Calendar.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify customdayname and customdayid at the same time.
  /resources/databaseconnection:
    get:
      tags:
        - Database Connection
        - Connection
      summary: Read a Database Connection
      description: Retrieves information on a specific Database Connection.
      operationId: getDatabaseConnection
      parameters:
        - name: connectionid
          in: query
          description: ID used within the Controller to identify this Database Connection.
          schema:
            type: string
        - name: connectionname
          in: query
          description: Name used within the Controller to identify this Database Connection.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseConnectionWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/DatabaseConnectionWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either connectionname or connectionid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A database connection with id "connectionid" does not exist.
    put:
      tags:
        - Database Connection
        - Connection
      summary: Modify a Database Connection
      description: Modifies the Database Connection specified by the sysId.
      operationId: updateDatabaseConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/DatabaseConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the database connection with id "connectionid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A database connection with id "connectionid" does not exist.
    post:
      tags:
        - Database Connection
        - Connection
      summary: Create a Database Connection
      description: Creates a Database Connection.
      operationId: createDatabaseConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/DatabaseConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the database connection with id "connectionid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create database connection failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Database Connection
        - Connection
      summary: Delete a Database Connection
      description: Deletes the specified Database Connection.
      operationId: deleteDatabaseConnection
      parameters:
        - name: connectionid
          in: query
          description: ID used within the Controller to identify this Database Connection.
          schema:
            type: string
        - name: connectionname
          in: query
          description: Name used within the Controller to identify this Database Connection.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Database connection deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either connectionname or connectionid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A database connection with id "connectionid" does not exist.
  /resources/databaseconnection/list:
    get:
      tags:
        - Database Connection
        - Connection
      summary: List Database Connections
      description: Retrieves information on all Database Connections.
      operationId: listDatabaseConnections
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/emailconnection:
    get:
      tags:
        - Email Connection
        - Connection
        - Email
      summary: Read an Email Connection
      description: Retrieves information on a specific Email Connection.
      operationId: getEmailConnection
      parameters:
        - name: connectionid
          in: query
          description: ID used within the Controller to identify this Email Connection.
          schema:
            type: string
        - name: connectionname
          in: query
          description: Name used within the Controller to identify this Email Connection.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailConnectionWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/EmailConnectionWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either connectionname or connectionid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An email connection with id "connectionid" does not exist.
    put:
      tags:
        - Email Connection
        - Connection
        - Email
      summary: Modify an Email Connection
      description: Modifies the Email Connection specified by the sysId.
      operationId: updateEmailConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/EmailConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the email connection with id "connectionid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An email connection with id "connectionid" does not exist.
    post:
      tags:
        - Email Connection
        - Connection
        - Email
      summary: Create an Email Connection
      description: Creates an Email Connection.
      operationId: createEmailConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/EmailConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the email connection with id "connectionid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create email connection failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Email Connection
        - Connection
        - Email
      summary: Delete a Email Connection
      description: Deletes the specified Email Connection.
      operationId: deleteEmailConnection
      parameters:
        - name: connectionid
          in: query
          description: ID used within the Controller to identify this Email Connection.
          schema:
            type: string
        - name: connectionname
          in: query
          description: Name used within the Controller to identify this Email Connection.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Email connection deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either connectionname or connectionid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An email connection with id "connectionid" does not exist.
  /resources/emailconnection/list:
    get:
      tags:
        - Email Connection
        - Connection
        - Email
      summary: List Email Connections
      description: Retrieves information on all Email Connections.
      operationId: listEmailConnections
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/emailtemplate:
    get:
      tags:
        - Email Template
        - Email
      summary: Read an Email Template
      description: Retrieves information on a specific Email Template.
      operationId: getEmailTemplate
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Email Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Email Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplateWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/EmailTemplateWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify templatename and templateid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An email template with id "templateId" does not exist.
    put:
      tags:
        - Email Template
        - Email
      summary: Modify an Email Template
      description: Modifies the Email Template specified by the sysId.
      operationId: updateEmailTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplateWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/EmailTemplateWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the Email Template with id "templateid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An email template with id "templateid" does not exist.
    post:
      tags:
        - Email Template
        - Email
      summary: Create an Email Template
      description: Creates an Email Template.
      operationId: createEmailTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplateWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/EmailTemplateWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the Email Template with id "templateid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create Email Template failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Email Template
        - Email
      summary: Delete an Email Template
      description: Deletes the specified Email Template.
      operationId: deleteEmailTemplate
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Email Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Email Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Email template deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either templatename or templateid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An email template with id "templateid" does not exist.
  /resources/emailtemplate/list:
    get:
      tags:
        - Email Template
        - Email
      summary: List Email Templates
      description: Retrieves information on all Email Templates..
      operationId: listEmailTemplate
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/ldap/changebindpwd:
    post:
      tags:
        - LDAP
      summary: Update LDAP Bind Password
      description: Modifies LDAP Settings Bind Password.
      operationId: changeBindPassword
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: LDAP Settings Bind Password changed successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: LDAP Settings Bind Password cannot be empty.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Bind Password cannot be updated until the LDAP Settings are configured.
  /resources/ldap:
    get:
      tags:
        - LDAP
      summary: Read LDAP Settings
      description: Retrieves LDAP Settings.
      operationId: getLdap
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/LdapWsData'
        '400':
          description: Bad Request
    put:
      tags:
        - LDAP
      summary: Update LDAP Settings
      description: Modifies LDAP Settings.
      operationId: updateLdap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/LdapWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the LDAP Settings.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: LDAP Settings with id "sysId" not found.
  /resources/metrics:
    get:
      tags:
        - Monitoring
      summary: Universal Controller Metrics (Prometheus)
      description: Scrapes the Universal Controller metrics as Prometheus text.
      operationId: getMetrics
      responses:
        '200':
          description: OK
          content:
            text/plain: {}
        '400':
          description: Bad Request
  /resources/oauthclient:
    get:
      tags:
        - OAuth Client
        - Email
      summary: Read an OAuth Client
      description: Retrieves information on a specific OAuth Client
      operationId: getOAuthClient
      parameters:
        - name: oauthclientid
          in: query
          description: ID used within the Controller to identify this OAuth Client.
          schema:
            type: string
        - name: oauthclientname
          in: query
          description: Name used within the Controller to identify this OAuth Client.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthClientWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/OAuthClientWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify oauthclientname and oauthclientid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An OAuth Client with id "oauthclientId" does not exist.
    put:
      tags:
        - OAuth Client
        - Email
      summary: Modify an OAuth Client
      description: Modifies the OAuth Client specified by the sysId.
      operationId: updateOAuthClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthClientWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/OAuthClientWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the OAuth Client with id "oauthclientid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An OAuth Client with id "oauthclientid" does not exist.
    post:
      tags:
        - OAuth Client
        - Email
      summary: Create an OAuth Client
      description: Creates an OAuth Client.
      operationId: createOAuthClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthClientWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/OAuthClientWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the OAuth Client with id "oauthclientid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create OAuth Client failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - OAuth Client
        - Email
      summary: Delete an OAuth Client
      description: Deletes the specified OAuth Client.
      operationId: deleteOAuthClient
      parameters:
        - name: oauthclientid
          in: query
          description: ID used within the Controller to identify this OAuth Client.
          schema:
            type: string
        - name: oauthclientname
          in: query
          description: Name used within the Controller to identify this OAuth Client.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: OAuth Client deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either oauthclientname or oauthclientid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An OAuth Client with id "oauthclientid" does not exist.
  /resources/oauthclient/list:
    get:
      tags:
        - OAuth Client
        - Email
      summary: List OAuth Clients
      description: Retrieves information on all OAuth Clients.
      operationId: listOAuthClients
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/oauthsettings:
    get:
      tags:
        - OAuth Single Sign-On
      summary: Read OAuth Single Sign-On Settings
      description: Retrieves information for the OAuth Single Sign-On Settings.
      operationId: getOAuthSettings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthSettingsWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/OAuthSettingsWsData'
        '403':
          description: Forbidden
          content:
            text/plain:
              example: Operation prohibited due to security constraints.
    put:
      tags:
        - OAuth Single Sign-On
      summary: Modify OAuth Single Sign-On Settings
      description: Modifies the OAuth Single Sign-On Settings.
      operationId: updateOAuthSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthSettingsWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/OAuthSettingsWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the OAuth Single Sign-On Settings with id <oauthsettingsid>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Update OAuth Single Sign-On Settings failed. <reason>
        '403':
          description: Forbidden
          content:
            text/plain:
              example: Operation prohibited due to security constraints.
  /resources/omsserver:
    get:
      tags:
        - OMS Server
      summary: Read an OMS Server
      description: Retrieves information on a specific OMS Server.
      operationId: getOmsServer
      parameters:
        - name: serveraddress
          in: query
          description: IP address or host name of this OMS Server.
          schema:
            type: string
        - name: serverid
          in: query
          description: ID used within the Controller to identify this OMS Server.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OmsServerWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/OmsServerWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify serveraddress and serverid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A server with id "serverid" does not exist.
    put:
      tags:
        - OMS Server
      summary: Modify an OMS Server
      description: 'Modifies the OMS Server specified by the sysId. To modify OMS Server properties without modifying related records, set excludeRelated = true.'
      operationId: updateOmsServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OmsServerWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/OmsServerWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the OMS Server with id "serverid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A OMS Server with id "serverid" does not exist.
    post:
      tags:
        - OMS Server
      summary: Create an OMS Server
      description: Creates an OMS Server.
      operationId: createOmsServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OmsServerWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/OmsServerWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the OMS Server with id "serverid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create OMS Server failed. Record with id "serverid" already exists.
    delete:
      tags:
        - OMS Server
      summary: Delete an OMS Server
      description: Deletes the specified OMS Server.
      operationId: deleteOmsServer
      parameters:
        - name: serveraddress
          in: query
          description: IP address or host name of this OMS Server.
          schema:
            type: string
        - name: serverid
          in: query
          description: ID used within the Controller to identify this OMS Server.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: OMS Server deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either serveraddress or serverid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A server with id "serverid" does not exist.
  /resources/omsserver/list:
    get:
      tags:
        - OMS Server
      summary: List OMS Servers
      description: Retrieves the Server address or partial server address of all OMS servers.
      operationId: listOmsServers
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/peoplesoftconnection:
    get:
      tags:
        - Peoplesoft Connection
        - Connection
      summary: Read a PeopleSoft Connection
      description: Retrieves information on a specific PeopleSoft Connection.
      operationId: getPeoplesoftConnection
      parameters:
        - name: connectionid
          in: query
          description: ID used within the Controller to identify this PeopleSoft Connection.
          schema:
            type: string
        - name: connectionname
          in: query
          description: Name used within the Controller to identify this PeopleSoft Connection.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeoplesoftConnectionWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/PeoplesoftConnectionWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either connectionname or connectionid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A PeopleSoft connection with id "connectionid" does not exist.
    put:
      tags:
        - Peoplesoft Connection
        - Connection
      summary: Modify a PeopleSoft Connection
      description: Modifies the PeopleSoft Connection specified by the sysId.
      operationId: updatePeoplesoftConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeoplesoftConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/PeoplesoftConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the PeopleSoft connection with with id "connectionid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A PeopleSoft connection with id "connectionid" does not exist.
    post:
      tags:
        - Peoplesoft Connection
        - Connection
      summary: Create a PeopleSoft Connection
      description: Creates a PeopleSoft Connection.
      operationId: createPeoplesoftConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeoplesoftConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/PeoplesoftConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the PeopleSoft connection with id "connectionid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create PeopleSoft connection failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Peoplesoft Connection
        - Connection
      summary: Delete a PeopleSoft Connection
      description: Deletes the specified PeopleSoft Connection.
      operationId: deletePeoplesoftConnection
      parameters:
        - name: connectionid
          in: query
          description: ID used within the Controller to identify this PeopleSoft Connection.
          schema:
            type: string
        - name: connectionname
          in: query
          description: Name used within the Controller to identify this PeopleSoft Connection.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: PeopleSoft connection deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either connectionname or connectionid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A PeopleSoft connection with id "connectionid" does not exist.
  /resources/peoplesoftconnection/list:
    get:
      tags:
        - Peoplesoft Connection
        - Connection
      summary: List PeopleSoft Connections
      description: Retrieves information on all PeopleSoft Connections.
      operationId: listPeoplesoftConnections
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/promote:
    post:
      tags:
        - Promotion
      summary: Bundleless Promotion
      description: 'Promotes, without a bundle, one or more items of a specific type.'
      operationId: promote_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromoteWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/PromoteWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/promotion/schedule/cancel:
    post:
      tags:
        - Promotion
      summary: Cancel a Scheduled Bundle Promotion
      description: Cancels the scheduled promotion of a Bundle.
      operationId: cancelPromotionSchedule
      parameters:
        - name: scheduleid
          in: query
          description: ID used within the Controller to identify this Promotion Schedule.
          schema:
            type: string
        - name: bundleid
          in: query
          description: ID used within the Controller to identify this Bundle.
          schema:
            type: string
        - name: bundlename
          in: query
          description: Name used within the Controller to identify this Bundle.
          schema:
            type: string
        - name: date
          in: query
          description: 'Date when the promotion was scheduled. Corresponds to the year, month, and day of the Scheduled Time field in a promotion schedule. Format: yyyy-MM-dd.'
          schema:
            type: string
        - name: time
          in: query
          description: 'Time when the promotion was scheduled. Corresponds to the year, month, and day of the Scheduled Time field in a promotion schedule. Format: HH:mm.'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: 'One of parameters scheduleid, bundleid, or bundlename required.'
        '404':
          description: Not Found
          content:
            text/plain:
              example: Unable to find qualifying promotion schedule.
  /resources/promotion/schedule:
    delete:
      tags:
        - Promotion
      summary: Delete a Scheduled Bundle Promotion
      description: Deletes the scheduled promotion of a Bundle.
      operationId: deletePromotionSchedule
      parameters:
        - name: scheduleid
          in: query
          description: ID used within the Controller to identify this Promotion Schedule.
          schema:
            type: string
        - name: bundleid
          in: query
          description: ID used within the Controller to identify this Bundle.
          schema:
            type: string
        - name: bundlename
          in: query
          description: Name used within the Controller to identify this Bundle.
          schema:
            type: string
        - name: date
          in: query
          description: 'Date when the promotion was scheduled. Corresponds to the year, month, and day of the Scheduled Time field in a promotion schedule. Format: yyyy-MM-dd.'
          schema:
            type: string
        - name: time
          in: query
          description: 'Time when the promotion was scheduled. Corresponds to the year, month, and day of the Scheduled Time field in a promotion schedule. Format: HH:mm.'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Promotion schedule deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: 'One of parameters scheduleid, bundleid, or bundlename required.'
        '404':
          description: Not Found
          content:
            text/plain:
              example: Unable to find qualifying promotion schedule.
  /resources/promotiontarget:
    get:
      tags:
        - Promotion
      summary: Read a Promotion Target
      description: Retrieve a specified Promotion Target details.
      operationId: getPromotionTarget
      parameters:
        - name: targetname
          in: query
          description: Name used within the Controller to identify this Promotion Target.
          schema:
            type: string
        - name: targetid
          in: query
          description: ID used within the Controller to identify this Promotion Target.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionTargetWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/PromotionTargetWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify targetname and targetid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A target with id "targetid" does not exist.
    put:
      tags:
        - Promotion
      summary: Modify a Promotion Target
      description: Modifies the specified Promotion Target.
      operationId: updatePromotionTarget
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionTargetWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/PromotionTargetWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the target with id "targetid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A target with id "targetid" does not exist.
    post:
      tags:
        - Promotion
      summary: Create a Promotion Target
      description: Creates a Promotion Target.
      operationId: createPromotionTarget
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionTargetWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/PromotionTargetWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the promotion target with id "targetid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create promotion target failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Promotion
      summary: Delete a Promotion Target
      description: Deletes the specified Promotion Target.
      operationId: deletePromotionTarget
      parameters:
        - name: targetname
          in: query
          description: Name used within the Controller to identify this Promotion Target.
          schema:
            type: string
        - name: targetid
          in: query
          description: ID used within the Controller to identify this Promotion Target.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Promotion target deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either targetname or targetid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A promotion target with id "targetid" does not exist.
  /resources/promotiontarget/list:
    get:
      tags:
        - Promotion
      summary: List Promotion Targets
      description: Retrieves information on all Promotion Targets.
      operationId: listPromotionTargets
      parameters:
        - name: targetname
          in: query
          description: Name used within the Controller to identify this Promotion Target.
          schema:
            type: string
        - name: businessServices
          in: query
          description: Business Service that the Promotion Target belongs to.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/promotiontarget/refreshtargetagents:
    post:
      tags:
        - Promotion
      summary: Refresh Target Agents
      description: Refresh the Target Agents for a specified Promotion Target.
      operationId: refreshTargetAgents
      parameters:
        - name: targetname
          in: query
          description: Name used within the Controller to identify this Promotion Target.
          schema:
            type: string
        - name: targetid
          in: query
          description: ID used within the Controller to identify this Promotion Target.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPwdWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserPwdWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully refreshed target agents for "targetname".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify targetname and targetid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A promotion target with id "targetid" does not exist.
  /resources/property:
    get:
      tags:
        - Properties
      summary: Read a Property
      description: Retrieves information on a specific property.
      operationId: getProperty
      parameters:
        - name: propertyname
          in: query
          description: Name used within the Controller to identify this Property.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/PropertyWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: propertyname is required.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A property with name "propertyid" does not exist.
    put:
      tags:
        - Properties
      summary: Modify a Property
      description: Modifies the specified property.
      operationId: updateProperty
      parameters:
        - name: propertyname
          in: query
          description: Name used within the Controller to identify this Property.
          required: true
          schema:
            type: string
        - name: value
          in: query
          description: Specifies the Value of this Property.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the property with name "propertyname".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Update property failed. Invalid value.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A property with name "propertyname" does not exist.
  /resources/property/list:
    get:
      tags:
        - Properties
      summary: List Properties
      description: Retrieves information on all properties.
      operationId: listProperties
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/report/run:
    get:
      tags:
        - Report
      summary: Run Report
      description: 'Runs a Report. Chart Reports are generated in png format (image/png). Use the Accept HTTP Header to specify format of List Reports. List Report default is pdf format (application/pdf). '
      operationId: runReport
      parameters:
        - name: reporttitle
          in: query
          description: Title of the Report.
          required: true
          schema:
            type: string
        - name: visibility
          in: query
          description: 'If specified; This web service returns only the report that is visible to the user(Me) or group(Group) running the report or to everyone(Everyone). Valid values are Me, Group, and Everyone. '
          schema:
            type: string
        - name: groupname
          in: query
          description: If visibility = Group; Name of a specific user group.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/pdf: {}
            application/json: {}
            application/xml: {}
            text/csv: {}
            text/tab-separated-values: {}
            image/png: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Could not find report with name "reporttitle" visible to execution user "username".
  /resources/sapconnection:
    get:
      tags:
        - SAP Connection
        - Connection
      summary: Read an SAP Connection
      description: Retrieves information on a specific SAP Connection.
      operationId: getSapConnection
      parameters:
        - name: connectionid
          in: query
          description: ID used within the Controller to identify this SAP Connection.
          schema:
            type: string
        - name: connectionname
          in: query
          description: Name used within the Controller to identify this SAP Connection.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SapConnectionWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/SapConnectionWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either connectionname or connectionid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An SAP connection with id "connectionid" does not exist.
    put:
      tags:
        - SAP Connection
        - Connection
      summary: Modify an SAP Connection
      description: Modifies the SAP Connection specified by the sysId.
      operationId: updateSapConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SapConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SapConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the SAP connection with with id "connectionid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A SAP connection with id "connectionid" does not exist.
    post:
      tags:
        - SAP Connection
        - Connection
      summary: Create an SAP Connection
      description: Creates an SAP Connection.
      operationId: createSapConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SapConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SapConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the SAP connection with id "connectionid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create SAP connection failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - SAP Connection
        - Connection
      summary: Delete an SAP Connection
      description: Deletes the specified SAP Connection.
      operationId: deleteSapConnection
      parameters:
        - name: connectionid
          in: query
          description: ID used within the Controller to identify this SAP Connection.
          schema:
            type: string
        - name: connectionname
          in: query
          description: Name used within the Controller to identify this SAP Connection.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: SAP connection deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either connectionname or connectionid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An SAP connection with id "connectionid" does not exist.
  /resources/sapconnection/list:
    get:
      tags:
        - SAP Connection
        - Connection
      summary: List SAP Connections
      description: Retrieves information on all SAP Connections.
      operationId: listSapConnections
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/script:
    get:
      tags:
        - Script
      summary: Read a Script
      description: Retrieves information on a specific Script.
      operationId: getScript
      parameters:
        - name: scriptid
          in: query
          description: ID used within the Controller to identify this Script.
          schema:
            type: string
        - name: scriptname
          in: query
          description: Name used within the Controller to identify this Script.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/ScriptWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify scriptname and scriptid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A script with id "scriptid" does not exist.
    put:
      tags:
        - Script
      summary: Modify a Script
      description: Modifies the Script specified by the sysId.
      operationId: updateScript
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ScriptWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the script with id "scriptid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A script with id "scriptid" does not exist.
    post:
      tags:
        - Script
      summary: Create a Script
      description: Creates a Script.
      operationId: createScript
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ScriptWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the script with id "scriptid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create script failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Script
      summary: Delete a Script
      description: Deletes the specified Script.
      operationId: deleteScript
      parameters:
        - name: scriptid
          in: query
          description: ID used within the Controller to identify this Script.
          schema:
            type: string
        - name: scriptname
          in: query
          description: Name used within the Controller to identify this Script.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Script deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either scriptname or scriptid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A script with id "scriptid" does not exist.
  /resources/script/list:
    get:
      tags:
        - Script
      summary: List Scripts
      description: Retrieves information on all Scripts.
      operationId: listScripts
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/serveroperation/bulkexport:
    post:
      tags:
        - Server Operation
      summary: Bulk Export
      description: Performs a Bulk Export server operation.
      operationId: bulkExport
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
        '400':
          description: Bad Request
  /resources/serveroperation/bulkexportactivity:
    post:
      tags:
        - Server Operation
      summary: Bulk Export Activity
      description: Performs a Bulk Export Activity server operation.
      operationId: bulkExportActivity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
        '400':
          description: Bad Request
  /resources/serveroperation/bulkexportaudit:
    post:
      tags:
        - Server Operation
      summary: Bulk Export Audit
      description: Performs a Bulk Export Audit server operation.
      operationId: bulkExportAudit
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
        '400':
          description: Bad Request
  /resources/serveroperation/bulkexporthistory:
    post:
      tags:
        - Server Operation
      summary: Bulk Export History
      description: Performs a Bulk Export History server operation.
      operationId: bulkExportHistory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
        '400':
          description: Bad Request
  /resources/serveroperation/bulkexportwithversions:
    post:
      tags:
        - Server Operation
      summary: Bulk Export with Versions
      description: Performs a Bulk Export with Versions server operation.
      operationId: bulkExportWithVersions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/BulkExportResponseWsData'
        '400':
          description: Bad Request
  /resources/serveroperation/bulkimport:
    post:
      tags:
        - Server Operation
      summary: Bulk Import
      description: Performs a Bulk Import server operation.
      operationId: bulkImport
      parameters:
        - name: path
          in: query
          description: Directory containing the imported file(s).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required path.
  /resources/serveroperation/downloadlog:
    get:
      tags:
        - Server Operation
      summary: Download Log Files
      description: Retrieves the log details using a specific query parameter.
      operationId: downloadLog
      parameters:
        - name: logName
          in: query
          description: Log File name(s).
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream: {}
        '400':
          description: Bad Request
  /resources/serveroperation/listlog:
    get:
      tags:
        - Server Operation
      summary: List Log Files
      description: Retrieves the log details.
      operationId: getLogs
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /resources/serveroperation/ldaprefresh:
    post:
      tags:
        - Server Operation
      summary: LDAP Refresh
      description: 'If LDAP is configured for the installation, it refreshes every 24 hours. This system operation forces a refresh. The refresh writes all log entries to the response output, as well as to the log, and the response will not be returned until the process completes. If you estimate the refresh could take a considerable amount of time, we recommend you use LDAP Refresh - Asynchronous.'
      operationId: ldapRefresh
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /resources/serveroperation/ldaprefreshasync:
    post:
      tags:
        - Server Operation
      summary: LDAP Refresh - Asynchronous
      description: 'If LDAP is configured for the installation, it refreshes every 24 hours. This system operation forces a refresh. The refresh is performed in the background and sends log entries to the Controller log..'
      operationId: ldapRefreshAsync
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /resources/serveroperation/pauseclusternode:
    post:
      tags:
        - Server Operation
      summary: Pause Cluster Node
      description: Sets the instance of the Universal Controller to paused (if active).
      operationId: pauseClusterNode
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /resources/serveroperation/resumeclusternode:
    post:
      tags:
        - Server Operation
      summary: Resume Cluster Node
      description: Resumes the instance of the Universal Controller (if paused).
      operationId: resumeClusterNode
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /resources/serveroperation/rolllog:
    get:
      tags:
        - Server Operation
      summary: Roll Log
      description: Renames the existing log to a timestamped log and opens a new log file.
      operationId: rollLog
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /resources/serveroperation/temporarypropertychange:
    post:
      tags:
        - Server Operation
      summary: Temporary Property Change
      description: Allows for the temporary setting of specific Universal Controller properties to be used for diagnosing problems. This operation and setting of properties should be performed only under the guidance of Stonebranch support.
      operationId: temporaryPropertyChange
      parameters:
        - name: name
          in: query
          description: Name of the Property to be changed.
          schema:
            type: string
        - name: value
          in: query
          description: Specifies the new Value of this Property.
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /resources/simulation:
    get:
      tags:
        - Simulation
      summary: Read a Simulation
      description: Retrieves information on a specific Simulation.
      operationId: getSimulation
      parameters:
        - name: simulationid
          in: query
          description: ID used within the Controller to identify this Simulation.
          schema:
            type: string
        - name: taskname
          in: query
          description: Name used within the Controller to identify the Task.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify the Workflow.
          schema:
            type: string
        - name: vertexid
          in: query
          description: Vertex ID of the Task in the Workflow
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulationWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/SimulationWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify simulationid along with any combination of taskname or workflowname or vertexid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A simulation with id "simulationid" does not exist.
    put:
      tags:
        - Simulation
      summary: Modify a Simulation
      description: Modifies the Simulation specified by the sysId.
      operationId: updateSimulation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulationWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SimulationWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the simulation with id "simulationid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A simulation with id "simulationid" does not exist.
    post:
      tags:
        - Simulation
      summary: Create a Simulation
      description: Creates a Simulation.
      operationId: createSimulation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulationWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SimulationWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the simulation with id "simulationid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Create simulation failed. Unable to add duplicate or overlapping simulation record.
    delete:
      tags:
        - Simulation
      summary: Delete a Simulation
      description: Deletes the specified Simulation.
      operationId: deleteSimulation
      parameters:
        - name: simulationid
          in: query
          description: ID used within the Controller to identify this Simulation.
          schema:
            type: string
        - name: taskname
          in: query
          description: Name used within the Controller to identify the Task.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify the Workflow.
          schema:
            type: string
        - name: vertexid
          in: query
          description: Vertex ID of the Task in the Workflow
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Simulation deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify simulationid along with any combination of taskname or workflowname or vertexid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A simulation with id "simulationid" does not exist.
  /resources/simulation/list:
    get:
      tags:
        - Simulation
      summary: List Simulations
      description: Retrieves information on all Simulations.
      operationId: listSimulations
      parameters:
        - name: taskname
          in: query
          description: Name used within the Controller to identify the Task.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify the Workflow.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: 'Cannot find workflow: "workflowname".'
  /resources/snmpmanager:
    get:
      tags:
        - SNMP Manager
        - Connection
      summary: Read an SNMP Manager
      description: Retrieves information on a specific SNMP Manager.
      operationId: getSnmpConnection
      parameters:
        - name: managerid
          in: query
          description: ID used within the Controller to identify this SNMP Manager.
          schema:
            type: string
        - name: managername
          in: query
          description: Name used within the Controller to identify this SNMP Manager.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnmpConnectionWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/SnmpConnectionWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either managername or managerid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An SNMP manager with id "managerid" does not exist.
    put:
      tags:
        - SNMP Manager
        - Connection
      summary: Modify an SNMP Manager
      description: Modifies the SNMP Manager specified by the sysId.
      operationId: updateSnmpConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnmpConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SnmpConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the SNMP manager with id "managerid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An SNMP manager with id "managerid" does not exist.
    post:
      tags:
        - SNMP Manager
        - Connection
      summary: Create an SNMP Manager
      description: Creates an SNMP Manager.
      operationId: createSnmpConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnmpConnectionWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SnmpConnectionWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the database manager with id "managerid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create SNMP manager failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - SNMP Manager
        - Connection
      summary: Delete a SNMP Manager
      description: Deletes the specified SNMP Manager.
      operationId: deleteSnmpConnection
      parameters:
        - name: managerid
          in: query
          description: ID used within the Controller to identify this SNMP Manager.
          schema:
            type: string
        - name: managername
          in: query
          description: Name used within the Controller to identify this SNMP Manager.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: SNMP manager deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either managername or managerid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: An SNMP manager with id "managerid" does not exist.
  /resources/snmpmanager/list:
    get:
      tags:
        - SNMP Manager
        - Connection
      summary: List SNMP Managers
      description: Retrieves information on all SNMP Managers.
      operationId: listSnmpConnections
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/status:
    get:
      tags:
        - System
      summary: Retrieve System Details
      description: Retrieves Universal Controller system status/information.
      operationId: getStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetSystemWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/WidgetSystemWsData'
        '400':
          description: Bad Request
  /resources/taskinstance:
    delete:
      tags:
        - Task Instance
      summary: Delete a Task Instance
      description: 'Deletes the specified Task Instance. For Workflow Task Instances, if recursive = true, all children task instances will be removed.'
      operationId: deleteTaskInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Task instance(s) deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: No match found for task instance id "id".
  /resources/taskinstance/listadv:
    post:
      tags:
        - Task Instance
      summary: List Task Instances - Advanced
      description: Retrieves information on Task Instance output matching specific search criteria.
      operationId: getTaskInstanceAdvanced
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceStatusRequestWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceStatusRequestWsData'
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/settimewait:
    post:
      tags:
        - Task Instance
      summary: Set or Modify Wait Time/Duration for Task Instance
      description: Sets or modifies a wait time/duration for a task instance.
      operationId: setTimewait
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/showvariables:
    get:
      tags:
        - Task Instance
      summary: List Task Instance Variables (Show Variables)
      description: Retrieves the variables for a specific task instance. Comparable to the Show Variables functionality in the user interface.
      operationId: showVariables
      parameters:
        - name: taskinstancename
          in: query
          description: Name used within the Controller to identify this Task Instance.
          schema:
            type: string
        - name: taskinstanceid
          in: query
          description: ID used within the Controller to identify this Task Instance.
          schema:
            type: string
        - name: workflowinstancename
          in: query
          description: If taskinstancename is specified; Name used to identify the Workflow Task Instance containing this Task Instance.
          schema:
            type: string
        - name: criteria
          in: query
          description: If taskinstancename is specified; Specific task instance with this Task Instance Name. 1 = Oldest Active Instance. 2 = Newest Active Instance. 3 = Oldest Instance. 4 = Newest Instance.
          schema:
            type: string
        - name: fetchglobal
          in: query
          description: Specifies whether or not to retrieve Global Variables.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableReportWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/VariableReportWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify task instance id and task instance name at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: No match found for task instance id "taskinstanceid".
  /resources/taskinstance/dependency/list:
    get:
      tags:
        - Task Instance
      summary: List Predecessors / Successors of a Task Instance in a Workflow
      description: Returns the list of task instance dependencies.
      operationId: taskDependencyList
      parameters:
        - name: taskinstancename
          in: query
          description: Name used within the Controller to identify this Task Instance.
          schema:
            type: string
        - name: taskinstanceid
          in: query
          description: ID used within the Controller to identify this Task Instance.
          schema:
            type: string
        - name: workflowinstancename
          in: query
          description: If taskinstancename is specified; Name used to identify the Workflow Task Instance containing this Task Instance.
          schema:
            type: string
        - name: criteria
          in: query
          description: If taskinstancename is specified; Specific task instance with this Task Instance Name. 1 = Oldest Active Instance. 2 = Newest Active Instance. 3 = Oldest Instance. 4 = Newest Instance.
          schema:
            type: string
        - name: dependencytype
          in: query
          description: Type of dependency to list for the Task Instance.
          schema:
            type: string
            default: '*'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify task instance id and task instance name at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: No match found for task instance id "taskinstanceid".
  /resources/taskinstance/ops-task-insert:
    post:
      tags:
        - Task Instance
      summary: Insert a Task into a Workflow with Dependencies
      description: Inserts a task into a Workflow with dependencies.
      operationId: taskInsert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInsertWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInsertWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/cancel:
    post:
      tags:
        - Task Instance
      summary: Cancel a Task Instance
      description: Cancels a Task Instance.
      operationId: taskInstanceCancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/cleardependencies:
    post:
      tags:
        - Task Instance
      summary: Clear All Dependencies
      description: Clears all dependencies of a task instance.
      operationId: taskInstanceClearDependencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/clearexclusive:
    post:
      tags:
        - Task Instance
      summary: Clear Exclusive Dependencies
      description: Clears all exclusive dependencies of a task instance.
      operationId: taskInstanceClearExclusive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/clearinstancewait:
    post:
      tags:
        - Task Instance
      summary: Clear Instance Wait Dependencies
      description: Clears the previous instance wait condition of a task instance.
      operationId: taskInstanceClearInstanceWait
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/clearpredecessors:
    post:
      tags:
        - Task Instance
      summary: Clear Predecessor Dependencies
      description: Clears all predecessor dependencies of a task instance in a Workflow.
      operationId: taskInstanceClearPredecessors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/clearresources:
    post:
      tags:
        - Task Instance
      summary: Clear Virtual Resource Dependencies
      description: Clears virtual resource dependencies of a task instance.
      operationId: taskInstanceClearResources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/cleartimewait:
    post:
      tags:
        - Task Instance
      summary: Clear Time Dependency
      description: Clears the time dependency of a task instance.
      operationId: taskInstanceClearTimewait
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/forcefinish:
    post:
      tags:
        - Task Instance
      summary: Force Finish a Task Instance
      description: 'Force Finish a task instance. To Force Finish (Halt) a task instance, set halt = true.'
      operationId: taskInstanceForceFinish
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/forcefinishcancel:
    post:
      tags:
        - Task Instance
      summary: Force Finish/Cancel a Task Instance
      description: 'Force Finish/Cancel a task instance. To Force Finish/Cancel (Halt) a task instance, set halt = true.'
      operationId: taskInstanceForceFinishCancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/hold:
    post:
      tags:
        - Task Instance
      summary: Hold a Task Instance
      description: Holds a Task Instance.
      operationId: taskInstanceHold
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/setcompleted:
    post:
      tags:
        - Task Instance
      summary: Issue Set Completed Command for a Manual Task Instance
      description: Issues a Set Completed command for a Manual Task instance.
      operationId: taskInstanceManualSetCompleted
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/setstarted:
    post:
      tags:
        - Task Instance
      summary: Issue Set Started Command for a Manual Task Instance
      description: Issues a Set Started command for a Manual Task instance.
      operationId: taskInstanceManualSetStarted
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/release:
    post:
      tags:
        - Task Instance
      summary: Release a Task Instance from Hold
      description: 'Releases the specified task instance from hold. For Workflow task instances, if the recursive property = true, all children task instances will be released from hold.'
      operationId: taskInstanceRelease
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/rerun:
    post:
      tags:
        - Task Instance
      summary: Rerun a Task Instance
      description: Reruns a Task Instance.
      operationId: taskInstanceRerun
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/retrieveoutput:
    get:
      tags:
        - Task Instance
      summary: Retrieve Task Instance Output
      description: 'Retrieves the output of a task instance. When Universal Controller requests the output from the associated Agent, only the output type specified by the outputtype property will be requested. However, the Universal Controller response will also include any output previously associated with the task instance in the database, regardless of output type.'
      operationId: taskInstanceRetrieveOutput
      parameters:
        - name: taskinstancename
          in: query
          description: Name used within the Controller to identify this Task Instance.
          schema:
            type: string
        - name: taskinstanceid
          in: query
          description: ID used within the Controller to identify this Task Instance.
          schema:
            type: string
        - name: workflowinstancename
          in: query
          description: If taskinstancename is specified; Name used to identify the Workflow Task Instance containing this Task Instance.
          schema:
            type: string
        - name: criteria
          in: query
          description: If taskinstancename is specified; Specific task instance with this Task Instance Name. 1 = Oldest Active Instance. 2 = Newest Active Instance. 3 = Oldest Instance. 4 = Newest Instance.
          schema:
            type: string
            default: '1'
        - name: outputtype
          in: query
          description: Type of task instance output to retrieve. 0 = OUTERR. 1 = STDOUT. 2 = STDERR.
          schema:
            type: string
            default: '0'
        - name: startline
          in: query
          description: Indicates the line to begin retrieving output data.
          schema:
            type: string
            default: '1'
        - name: numlines
          in: query
          description: Number of lines to retrieve.
          schema:
            type: string
        - name: scantext
          in: query
          description: Scan the data for the text specified and retrieve only that.
          schema:
            type: string
        - name: operationalMemo
          in: query
          description: User-defined operational memo.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify task instance id and task instance name at the same time.
  /resources/taskinstance/setpriority:
    post:
      tags:
        - Task Instance
      summary: Set Priority for a Task Instance
      description: 'Set priority for a task instance (Linux/Unix, Windows, Universal, or z/OS).'
      operationId: taskInstanceSetPriority
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/skip:
    post:
      tags:
        - Task Instance
      summary: Skip a Task Instance
      description: Skips a Task Instance.
      operationId: taskInstanceSkip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/skippath:
    post:
      tags:
        - Task Instance
      summary: Skip a Task Instance Path
      description: Skips a Task Instance Path.
      operationId: taskInstanceSkipPath
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/unskip:
    post:
      tags:
        - Task Instance
      summary: Unskip a Task Instance
      description: Unskips a Task Instance.
      operationId: taskInstanceUnskip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/list:
    post:
      tags:
        - Task Instance
      summary: List Task Instances
      description: Retrieves information on task instances matching specific search criteria.
      operationId: taskStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstanceStatusRequestWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskInstanceStatusRequestWsData'
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/taskinstance/updatememo:
    put:
      tags:
        - Task Instance
      summary: Update a Task Instance Operational Memo
      description: Updates the operational memo for a task instance record.
      operationId: updateOperationalMemo
      parameters:
        - name: taskinstancename
          in: query
          description: Name used within the Controller to identify this Task Instance.
          schema:
            type: string
        - name: taskinstanceid
          in: query
          description: ID used within the Controller to identify this Task Instance.
          schema:
            type: string
        - name: workflowinstancename
          in: query
          description: If taskinstancename is specified; Name used to identify the Workflow Task Instance containing this Task Instance.
          schema:
            type: string
        - name: criteria
          in: query
          description: If taskinstancename is specified; Specific task instance with this Task Instance Name. 1 = Oldest Active Instance. 2 = Newest Active Instance. 3 = Oldest Instance. 4 = Newest Instance.
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Updated the operational memo for record with task instance id "taskinstanceid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Memo length cannot be greater than 255.
        '404':
          description: Not Found
          content:
            text/plain:
              example: No match found for task instance id "taskinstanceid".
  /resources/task:
    get:
      tags:
        - Task
      summary: Read a Task
      description: Retrieves information on the specified task.
      operationId: getTask
      parameters:
        - name: taskid
          in: query
          description: ID used within the Controller to identify this Task.
          schema:
            type: string
        - name: taskname
          in: query
          description: Name used within the Controller to identify this Task.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify taskname and taskid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A task with id "taskid" does not exist.
    put:
      tags:
        - Task
      summary: Modify a Task
      description: 'Modifies the Task specified by the sysId in the request. To modify Task properties without modifying related records, set excludeRelated = true.'
      operationId: updateTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the <task type> task with id "taskid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A task with id "taskid" does not exist.
    post:
      tags:
        - Task
      summary: Create a Task
      description: Creates a Task.
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the "tasktype" task with id "taskid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create task failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Task
      summary: Delete a Task
      description: Deletes the specified Task.
      operationId: deleteTask
      parameters:
        - name: taskid
          in: query
          description: ID used within the Controller to identify this Task.
          schema:
            type: string
        - name: taskname
          in: query
          description: Name used within the Controller to identify this Task.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Task deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either taskname or taskid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A task with id "taskid" does not exist.
  /resources/task/list:
    post:
      tags:
        - Task
      summary: List Tasks
      description: Retrieves information on all Tasks.
      operationId: getTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericQueryFilterWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/GenericQueryFilterWsData'
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/task/listadv:
    get:
      tags:
        - Task
      summary: List Tasks - Advanced
      description: Retrieves information on Tasks matching specific search criteria.
      operationId: getTasksAdvanced
      parameters:
        - name: taskname
          in: query
          description: ID used within the Controller to identify this Task.
          schema:
            type: string
        - name: agentname
          in: query
          description: Name of the Agent on which the Task was run.
          schema:
            type: string
        - name: type
          in: query
          description: Task Type of Tasks to list.
          schema:
            type: string
        - name: businessServices
          in: query
          description: Business Services that the Task belongs to.
          schema:
            type: string
        - name: workflowname
          in: query
          description: 'Name used within the Controller to identify a Workflow. If specified, Returns a list of tasks within the specified Workflow.'
          schema:
            type: string
        - name: workflowid
          in: query
          description: 'ID used within the Controller to identify a Workflow. If specified, Returns a list of tasks within the specified Workflow.'
          schema:
            type: string
        - name: updatedTime
          in: query
          description: 'If updatedTimeType = Offset, Since, or Older Than; Values are mn(minutes), h(hours), and d(days).'
          schema:
            type: string
        - name: updatedTimeType
          in: query
          description: 'Type of updatedTime. Values are Today(1), Offset(2), Since(3) and Older Than(4).'
          schema:
            type: string
        - name: templateid
          in: query
          description: ID used within the controller to identify a Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the controller to identify a Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify templateid and templatename at the same time.
  /resources/task/parent/list:
    get:
      tags:
        - Task
      summary: List All Workflows That a Task Belongs To
      description: Retrieves a list of parent Workflows that a Task belongs to.
      operationId: getWorkflowList
      parameters:
        - name: taskname
          in: query
          description: Name used within the Controller to identify this Task.
          schema:
            type: string
        - name: taskid
          in: query
          description: ID used within the Controller to identify this Task.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Specify one of 'taskname' or 'taskid'.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Task with id "taskid" not found.
  /resources/task/launch:
    post:
      tags:
        - Task
      summary: Launch a Task
      description: Launches the specified Task.
      operationId: taskLaunch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskLaunchWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskLaunchWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWithSysIdWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWithSysIdWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/trigger/assignexecutionuser:
    post:
      tags:
        - Trigger
      summary: Assign an Execution User to a Trigger
      description: Assigns an Execution User to the specified trigger.
      operationId: assignExecutionUser
      parameters:
        - name: triggerid
          in: query
          description: ID used within the Controller to identify this Trigger.
          schema:
            type: string
        - name: triggername
          in: query
          description: Name used within the Controller to identify this Trigger.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionUserWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ExecutionUserWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully assigned execution user "user" to trigger "triggername".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Assign Execution User failed. Username invalid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A trigger with id "triggerid" does not exist.
  /resources/trigger:
    get:
      tags:
        - Trigger
      summary: Read a Trigger
      description: Retrieves information on the specified Trigger.
      operationId: getTrigger
      parameters:
        - name: triggerid
          in: query
          description: ID used within the Controller to identify this Trigger.
          schema:
            type: string
        - name: triggername
          in: query
          description: Name used within the Controller to identify this Trigger.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/TriggerWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify triggername and triggerid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A trigger with id "triggerid" does not exist.
    put:
      tags:
        - Trigger
      summary: Modify a Trigger
      description: 'Modifies the Trigger specified by the sysId in the request. To modify Trigger properties without modifying related records, set excludeRelated = true.'
      operationId: updateTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerAbstractWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TriggerAbstractWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the "triggertype" trigger with id "triggerid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A trigger with id "triggerid" does not exist.
    post:
      tags:
        - Trigger
      summary: Create a Trigger
      description: Creates a Trigger.
      operationId: createTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerAbstractWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TriggerAbstractWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the "triggertype" trigger with id "triggerid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create trigger failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Trigger
      summary: Delete a Trigger
      description: Deletes the specified Trigger.
      operationId: deleteTrigger
      parameters:
        - name: triggerid
          in: query
          description: ID used within the Controller to identify this Trigger.
          schema:
            type: string
        - name: triggername
          in: query
          description: Name used within the Controller to identify this Trigger.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Trigger deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either triggername or triggerid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A trigger with id "triggerid" does not exist.
  /resources/trigger/enabledisable:
    post:
      tags:
        - Trigger
      summary: Enable/Disable Trigger(s)
      description: Enables or Disables a list of Triggers.
      operationId: enableDisableTriggerList
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EnableDisableTriggerWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnableDisableTriggerListWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/trigger/listcomponentevents:
    get:
      tags:
        - Trigger
      summary: List Component Events for a Composite Trigger
      description: Retrieves Component Events for a Composite Trigger.
      operationId: getComponentEvents
      parameters:
        - name: triggername
          in: query
          description: Name used within the Controller to identify this Trigger.
          schema:
            type: string
        - name: triggerid
          in: query
          description: ID used within the Controller to identify this Trigger.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerComponentEventsWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/TriggerComponentEventsWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify triggername and triggerid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A trigger with id "triggerid" does not exist.
  /resources/trigger/list:
    post:
      tags:
        - Trigger
      summary: List Triggers
      description: Lists Triggers matching specific search criteria.
      operationId: getTriggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericQueryFilterWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/GenericQueryFilterWsData'
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/trigger/listadv:
    get:
      tags:
        - Trigger
      summary: List Triggers - Advanced
      description: Lists Triggers matching specific search criteria
      operationId: getTriggersAdvanced
      parameters:
        - name: triggername
          in: query
          description: Name used within the Controller to identify this Trigger.
          schema:
            type: string
        - name: type
          in: query
          description: Types of Trigger to list.
          schema:
            type: string
        - name: businessServices
          in: query
          description: Business Services that this Trigger belongs to.
          schema:
            type: string
        - name: enabled
          in: query
          description: Indication of whether to list enabled (true) or disabled (false) triggers.
          schema:
            type: boolean
        - name: tasks
          in: query
          schema:
            type: string
        - name: description
          in: query
          description: Filter the trigger list using the description.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/trigger/qualifyingtimes:
    get:
      tags:
        - Trigger
      summary: List Trigger Qualifying Times
      description: Lists Time trigger qualifying times from a specific starting date. Cron and Time Triggers only.
      operationId: listQualifyingTimes
      parameters:
        - name: triggerid
          in: query
          description: ID used within the Controller to identify this Trigger.
          schema:
            type: string
        - name: triggername
          in: query
          description: Name used within the Controller to identify this Trigger.
          schema:
            type: string
        - name: count
          in: query
          description: Number of qualifying events to list.
          schema:
            type: integer
            format: int32
            default: 30
        - name: startdate
          in: query
          description: Starting date of qualifying days to list.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QualifyingTimeListWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/QualifyingTimeListWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify triggername and triggerid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A trigger with id "triggerid" does not exist.
  /resources/trigger/setskipcount:
    post:
      tags:
        - Trigger
      summary: Set Skip count
      description: Sets the skip count for a specific trigger
      operationId: setSkipCount
      parameters:
        - name: triggername
          in: query
          schema:
            type: string
        - name: triggerid
          in: query
          schema:
            type: string
        - name: skipCount
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify triggername and triggerid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A trigger with id "triggerid" does not exist.
  /resources/trigger/settime:
    post:
      tags:
        - Trigger
      summary: Modify Time of Time Trigger
      description: Modifies the Time field of a Time Trigger with the Time Style field set to time.
      operationId: setTriggerTime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetTriggerTimeWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SetTriggerTimeWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/trigger/triggernow:
    post:
      tags:
        - Trigger
      summary: Trigger Task(s) (Trigger Now)
      description: Launches Trigger-associated tasks.
      operationId: triggerNow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerNowWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TriggerNowWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWithSysIdWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWithSysIdWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/trigger/unassignexecutionuser:
    post:
      tags:
        - Trigger
      summary: Unassign an Execution User from a Trigger
      description: Unassigns an Execution User from the specified trigger.
      operationId: unassignExecutionUser
      parameters:
        - name: triggerid
          in: query
          description: ID used within the Controller to identify this Trigger.
          schema:
            type: string
        - name: triggername
          in: query
          description: Name used within the Controller to identify this Trigger.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully unassigned execution user "user" from trigger "triggername".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either triggername or triggerid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A trigger with id "triggerid" does not exist.
  /resources/universalevent/publish:
    post:
      tags:
        - Universal Event
      summary: Publish Universal Event
      description: Publishes a global Universal Event.
      operationId: publish
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniversalEventWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UniversalEventWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Universal Event "eventname" published.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Universal Event Template "eventname" not found.
  '/resources/universalevent/push/{eventName}':
    get:
      tags:
        - Universal Event
      summary: Push Universal Event
      description: Provides an Inbound Webhook endpoint to publish Universal Events.
      operationId: pushg
      parameters:
        - name: payload
          in: query
          description: The request body.
          schema:
            type: string
        - name: eventName
          in: path
          description: Name used within the Controller to identify this Universal Event.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Universal Event "eventname" published.
        '400':
          description: Bad Request
        '404':
          description: Not Found
          content:
            text/plain:
              example: Universal Event Template "eventname" not found.
    post:
      tags:
        - Universal Event
      summary: Push Universal Event
      description: Provides an Inbound Webhook endpoint to publish Universal Events.
      operationId: push
      parameters:
        - name: eventName
          in: path
          description: Name used within the Controller to identify this Universal Event.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/xml:
            schema:
              type: string
          text/plain:
            schema:
              type: string
          text/xml:
            schema:
              type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Universal Event "eventname" published.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Universal Event Template "eventname" not found.
  /resources/universaleventtemplate:
    get:
      tags:
        - Universal Event Template
      summary: Read a Universal Event Template
      description: Reads a Universal Event Template.
      operationId: getUniversalEventTemplate
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Event Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Event Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversalEventTemplateWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/UniversalEventTemplateWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify templatename and templateid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal event template with id "templateid" does not exist.
    put:
      tags:
        - Universal Event Template
      summary: Modify a Universal Event Template
      description: Modifies the Universal Event Template specified by the sysId.
      operationId: updateUniversalEventTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniversalEventTemplateWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UniversalEventTemplateWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the universal event template with id "templateid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal event template with id "templateid" does not exist.
    post:
      tags:
        - Universal Event Template
      summary: Create a Universal Event Template
      description: Creates a Universal Event Template.
      operationId: createUniversalEventTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniversalEventTemplateWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UniversalEventTemplateWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the universal event template with id "templateid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Create universal event template failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Universal Event Template
      summary: Delete a Universal Event Template
      description: Deletes the specified Universal Event Template.
      operationId: deleteUniversalEventTemplate
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Event Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Event Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Universal event template deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either templatename or templateid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal event template with id "templateid" does not exist.
  /resources/universaleventtemplate/list:
    get:
      tags:
        - Universal Event Template
      summary: List Universal Event Templates
      description: Retrieves information on Universal Event Templates using specific query parameters. System event template will not be included in the list response.
      operationId: listUniversalEventTemplates
      parameters:
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Event Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/universaltemplate:
    get:
      tags:
        - Universal Template
      summary: Read a Universal Template
      description: Retrieves information on a specific Universal Template.
      operationId: getUniversalTemplate
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversalTemplateWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/UniversalTemplateWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify templatename and templateid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal template with id "templateid" does not exist.
    put:
      tags:
        - Universal Template
      summary: Modify a Universal Template
      description: 'Modifies the Universal Template specified by the sysId in the request. To modify Universal Template properties without modifying related records, set excludeRelated = true.'
      operationId: updateUniversalTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniversalTemplateWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UniversalTemplateWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the universal template with id "templateid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal template with id "templateid" does not exist.
    post:
      tags:
        - Universal Template
      summary: Create a Universal Template
      description: Creates a Universal Template.
      operationId: createUniversalTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniversalTemplateWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UniversalTemplateWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the universal template with id "templateid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Create universal template failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Universal Template
      summary: Delete a Universal Template
      description: Deletes the specified Universal Template.
      operationId: deleteUniversalTemplate
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Universal template deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either templatename or templateid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal template with id "templateid" does not exist.
  /resources/universaltemplate/extension:
    get:
      tags:
        - Universal Template
      summary: Download Extension Archive
      description: Downloads an Extension Archive for a Universal Template.
      operationId: getExtensionArchive
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify templatename and templateid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal template with id "templateid" does not exist.
    post:
      tags:
        - Universal Template
      summary: Upload Extension Archive
      description: 'Uploads an Extension Archive for a Universal Template. The Post request must include an attached binary file; specifically, it must be a zip file.'
      operationId: updateExtensionArchive
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Template.
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
          application/zip:
            schema:
              type: object
          application/x-zip-compressed:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated Extension Archive for universal template "templatename".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Universal template "templatename" is not an Extension template type.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal template with id \"templateid\" does not exist.
    delete:
      tags:
        - Universal Template
      summary: Delete Extension Archive
      description: Deletes an Extension Archive for a Universal Template.
      operationId: deleteExtensionArchive
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: 'Successfully removed Extension Archive from universal template "templatename}".'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Universal template "templatename" is not an Extension template type.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal template with id \"templateid\" does not exist.
  /resources/universaltemplate/exporttemplate:
    get:
      tags:
        - Universal Template
      summary: Export Universal Template
      description: Downloads the zip file of a specified Universal Template.
      operationId: exportTemplate
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Template.
          schema:
            type: string
        - name: excludeExtension
          in: query
          description: Indication of whether the extension archive zip file should be excluded in the export operation.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/octet-stream: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify templatename and templateid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal template with id "templateid" does not exist.
  /resources/universaltemplate/importtemplate:
    post:
      tags:
        - Universal Template
      summary: Import Universal Template
      description: Uploads the zip file of a Universal Template to be created/updated.
      operationId: importTemplate
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
          application/zip:
            schema:
              type: object
          application/x-zip-compressed:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: 'Successfully imported universal template. Created new template with id "templateid}".'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: The attached Template is invalid. Please re-import your Template.
  /resources/universaltemplate/list:
    get:
      tags:
        - Universal Template
      summary: List Universal Templates
      description: Retrieves information on Universal Templates using specific query parameters.
      operationId: listUniversalTemplates
      parameters:
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/universaltemplate/restoredefaulticon:
    post:
      tags:
        - Universal Template
      summary: Restore Default Universal Template Icon
      description: Restores the icon of a specific Universal Template to its default.
      operationId: restoreDefaultIcon
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Template.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully restored the default icon for Universal Template "templatename".
        '400':
          description: Bad Request
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal template with id "templateid" does not exist.
  /resources/universaltemplate/seticon:
    post:
      tags:
        - Universal Template
      summary: Set Universal Template Icon
      description: Uploads a 48 x 48 pixel to be set as the custom icon for a specific Universal Template.
      operationId: setTemplateIcon
      parameters:
        - name: templateid
          in: query
          description: ID used within the Controller to identify this Universal Template.
          schema:
            type: string
        - name: templatename
          in: query
          description: Name used within the Controller to identify this Universal Template.
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
          image/png:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully set icon for Universal Template "templatename".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: PNG image is not 48 x 48 pixels.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A universal template with id "templateid" does not exist.
  /resources/usergroup:
    get:
      tags:
        - Group
      summary: Read a Group
      description: Retrieves information on a specific Group.
      operationId: getUserGroup
      parameters:
        - name: groupid
          in: query
          description: ID used within the Controller to identify this Group.
          schema:
            type: string
        - name: groupname
          in: query
          description: Name used within the Controller to identify this Group.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserGroupWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify groupname and groupid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A user group with id "groupid" does not exist.
    put:
      tags:
        - Group
      summary: Modify a Group
      description: 'Modifies the Group specified by the sysId in the request. To modify Group properties without modifying related records, set excludeRelated = true.'
      operationId: updateUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserGroupWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the user group with id "groupid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: User group with id "groupid" does not exist.
    post:
      tags:
        - Group
      summary: Create a Group
      description: Creates a User Group.
      operationId: createUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserGroupWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the user group with id "groupid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create user group failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Group
      summary: Delete a Group
      description: Deletes the specified Group.
      operationId: deleteUserGroup
      parameters:
        - name: groupid
          in: query
          description: ID used within the Controller to identify this Group.
          schema:
            type: string
        - name: groupname
          in: query
          description: Name used within the Controller to identify this Group.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: User group "groupname" deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either groupid or groupname.
        '404':
          description: Not Found
          content:
            text/plain:
              example: User group with id "groupid" does not exist.
  /resources/usergroup/list:
    get:
      tags:
        - Group
      summary: List Groups
      description: Retrieves information on all Groups.
      operationId: listUserGroups
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/user/changepassword:
    post:
      tags:
        - User
        - Password
      summary: Change a Universal Controller User Password
      description: Changes a Universal Controller User's password.
      operationId: changeUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserPasswordWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ChangeUserPasswordWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/user:
    get:
      tags:
        - User
      summary: Read a User
      description: Retrieves information on a specific User.
      operationId: getUser
      parameters:
        - name: userid
          in: query
          description: ID used within the Controller to identify this User.
          schema:
            type: string
        - name: username
          in: query
          description: Name used within the Controller to identify this User.
          schema:
            type: string
        - name: showTokens
          in: query
          description: Specifies whether or not to show Personal Access Tokens.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify username and userid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A user with id "userid" does not exist.
    put:
      tags:
        - User
      summary: Modify a User
      description: 'Modifies the User specified by the sysId in the request. To modify User properties without modifying related records, set excludeRelated = true.'
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the user with id "userid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A user with id "userid" does not exist.
    post:
      tags:
        - User
      summary: Create a User
      description: Creates a User.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the user with id "userid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create user failed. A duplicate value has been detected. User Id (Username) must be unique.
    delete:
      tags:
        - User
      summary: Delete a User
      description: Deletes the specified User.
      operationId: deleteUser
      parameters:
        - name: userid
          in: query
          description: ID used within the Controller to identify this User.
          schema:
            type: string
        - name: username
          in: query
          description: Name used within the Controller to identify this User.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: User "username" deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either username or userid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A user with id "userid" does not exist.
  /resources/user/token:
    post:
      tags:
        - User
      summary: Create Personal Access Token
      description: Creates Personal Access Token.
      operationId: createUserToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/AuthTokenWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: '"Personal Access Token".'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either username or userid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A user with id "userid" does not exist.
    delete:
      tags:
        - User
      summary: Revoke Personal Access Token
      description: Delete the specified Personal Access Token(s).
      operationId: revokeUserToken
      parameters:
        - name: userid
          in: query
          description: ID used within the Controller to identify this User.
          schema:
            type: string
        - name: username
          in: query
          description: Name used within the Controller to identify this User.
          schema:
            type: string
        - name: tokenname
          in: query
          description: Name of the application that will access the Universal Controller Web Service APIs using the Personal Access Token.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Personal access token revoked successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify username and userid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A user with id "userid" does not exist.
  /resources/user/token/list:
    get:
      tags:
        - User
      summary: List Personal Access Tokens
      description: Lists all the User's Personal Access Tokens.
      operationId: getAuthTokens
      parameters:
        - name: userid
          in: query
          description: ID used within the Controller to identify this User.
          schema:
            type: string
        - name: username
          in: query
          description: Name used within the Controller to identify this User.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify username and userid at the same time.
  /resources/user/preference:
    get:
      tags:
        - User
      summary: Read a User Preference
      description: Retrieves information on a specific User Preference for a particular User.
      operationId: getUserPreference
      parameters:
        - name: preferencename
          in: query
          description: User preference name.
          schema:
            type: string
        - name: userid
          in: query
          description: ID used within the Controller to identify this User.
          schema:
            type: string
        - name: username
          in: query
          description: Name used within the Controller to identify this User.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UserPreferenceWsData'
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferenceWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: preferencename is required.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A user with id "userid" does not exist.
    put:
      tags:
        - User
      summary: Update a User Preference
      description: Modify a User Preference for a particular User.
      operationId: updateUserPreference
      parameters:
        - name: preferencename
          in: query
          description: User preference name.
          schema:
            type: string
        - name: value
          in: query
          description: Value of the user preference.
          schema:
            type: string
        - name: userid
          in: query
          description: ID used within the Controller to identify this User.
          schema:
            type: string
        - name: username
          in: query
          description: Name used within the Controller to identify this User.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the user with id "userid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: preferencename is required.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A user with id "userid" does not exist.
  /resources/user/preference/list:
    get:
      tags:
        - User
      summary: List User Preferences
      description: Retrieves information on all User Preferences for a particular User.
      operationId: listUserPreferences
      parameters:
        - name: userid
          in: query
          description: ID used within the Controller to identify this User.
          schema:
            type: string
        - name: username
          in: query
          description: Name used within the Controller to identify this User.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/user/list:
    get:
      tags:
        - User
      summary: List Users
      description: Retrieves information on all Users.
      operationId: listUsers
      parameters:
        - name: showTokens
          in: query
          description: Specifies whether or not to show Personal Access Tokens.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/variable:
    get:
      tags:
        - Variable
      summary: Read a Global Variable
      description: Retrieves information on a specific Global Variable.
      operationId: getVariable
      parameters:
        - name: variableid
          in: query
          description: ID used within the Controller to identify this Global Variable.
          schema:
            type: string
        - name: variablename
          in: query
          description: Name used within the Controller to identify this Global Variable.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalVariableWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/GlobalVariableWsData'
        '404':
          description: Not Found
          content:
            text/plain:
              example: A variable with id "variableid" does not exist.
    put:
      tags:
        - Variable
      summary: Modify a Global Variable
      description: Modifies the Global Variable specified by the sysId.
      operationId: updateVariable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalVariableWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/GlobalVariableWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the variable with id "variableid" to version "version".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A variable with id "variableid" does not exist.
    post:
      tags:
        - Variable
      summary: Create a Global Variable
      description: Creates a Global Variable.
      operationId: createVariable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalVariableWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/GlobalVariableWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the variable with id "variableid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Create variable failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Variable
      summary: Delete a Global Variable
      description: Deletes the specified Global Variable.
      operationId: deleteVariable
      parameters:
        - name: variableid
          in: query
          description: ID used within the Controller to identify this Global Variable.
          schema:
            type: string
        - name: variablename
          in: query
          description: Name used within the Controller to identify this Global Variable.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Variable deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify variablename and variableid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A variable with id "variableid" does not exist.
  /resources/variable/list:
    post:
      tags:
        - Variable
      summary: List Variables
      description: Retrieves information on variables matching specific search criteria.
      operationId: getVariables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariableListFilterWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/VariableListFilterWsData'
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/variable/listadv:
    get:
      tags:
        - Variable
      summary: List Variables - Advanced
      description: Retrieves variables details using specific query parameters.
      operationId: getVariablesAdvanced
      parameters:
        - name: scope
          in: query
          description: 'Type of variable to be returned in the Response. Values are global, local, task, and trigger.'
          schema:
            type: string
        - name: variablename
          in: query
          description: 'If scope is global (or local), and variableName is not specified, all Global (or Local) variables are returned in the Response. If scope is global (or local), and variableName is specified, all Global (or Local) variables matching that name are returned in the Response.'
          schema:
            type: string
        - name: taskname
          in: query
          description: If scope is task; Name of task
          schema:
            type: string
        - name: triggername
          in: query
          description: If scope is trigger; Name of the trigger.
          schema:
            type: string
        - name: businessServices
          in: query
          description: Business Services that the Variable belongs to.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: 'Cannot find business service: "businesServices".'
  /resources/variable/ops-variable-set:
    post:
      tags:
        - Variable
      summary: Set Variable
      description: Sets the specified variable.
      operationId: variableSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetVariableWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/SetVariableWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/virtual:
    get:
      tags:
        - Virtual Resource
      summary: Read a Virtual Resource
      description: Retrieves information on a specified Virtual Resource.
      operationId: getVirtualResource
      parameters:
        - name: resourceid
          in: query
          description: ID used within the Controller to identify this Virtual Resource.
          schema:
            type: string
        - name: resourcename
          in: query
          description: Name used within the Controller to identify this Virtual Resource.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualResourceWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/VirtualResourceWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify resourcename and resourceid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A virtual resource with id "resourceid" does not exist.
    put:
      tags:
        - Virtual Resource
      summary: Modify a Virtual Resource
      description: Modifies the Virtual Resource specified by the sysId.
      operationId: updateVirtualResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualResourceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/VirtualResourceWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the virtual resource with id "resourceid" to version <version>.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A virtual resource with id "resourceid" does not exist.
    post:
      tags:
        - Virtual Resource
      summary: Create a Virtual Resource
      description: Creates a Virtual Resource.
      operationId: createVirtualResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualResourceWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/VirtualResourceWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the virtual resource with id "resourceid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Create virtual resource failed. A duplicate value has been detected. Name must be unique.
    delete:
      tags:
        - Virtual Resource
      summary: Delete a Virtual Resource
      description: Deletes the specified Virtual Resource.
      operationId: deleteVirtualResource
      parameters:
        - name: resourceid
          in: query
          description: ID used within the Controller to identify this Virtual Resource.
          schema:
            type: string
        - name: resourcename
          in: query
          description: Name used within the Controller to identify this Virtual Resource.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Virtual resource deleted successfully.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either resourcename or resourceid.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A virtual resource with id "resourceid" does not exist.
  /resources/virtual/list:
    get:
      tags:
        - Virtual Resource
      summary: List Virtual Resources
      description: Retrieves information on all Virtual Resource including usage details.
      operationId: getVirtualResources
      parameters:
        - name: resourcename
          in: query
          description: Name used within the Controller to identify this Virtual Resource.
          schema:
            type: string
        - name: type
          in: query
          description: 'Type of Virtual Resource. Values are Renewable(1), Boundary(2), and Depletable(3).'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
  /resources/virtual/listadv:
    get:
      tags:
        - Virtual Resource
      summary: List Virtual Resources - Advanced
      description: Retrieves information on Virtual Resources.
      operationId: getVirtualResourcesAdvanced
      parameters:
        - name: resourcename
          in: query
          description: Name used within the Controller to identify this Virtual Resource.
          schema:
            type: string
        - name: type
          in: query
          description: 'Type of Virtual Resource. Values are Renewable(1), Boundary(2), and Depletable(3).'
          schema:
            type: string
        - name: businessServices
          in: query
          description: Business Services that the Virtual Resource belongs to.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: 'Cannot find business service: "businessService".'
  /resources/virtual/ops-update-resource-limit:
    post:
      tags:
        - Virtual Resource
      summary: Set Limit on a Virtual Resource
      description: Updates resource limit for specified virtual resources.
      operationId: updateLimit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualResourceSimpleWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/VirtualResourceSimpleWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/webhook/assignexecutionuser:
    post:
      tags:
        - Webhook
      summary: Assign an Execution User to a Webhook
      description: Assigns an Execution User to the specified Webhook.
      operationId: assignExecutionUser_1
      parameters:
        - name: webhookid
          in: query
          description: ID used within the Controller to identify this Webhook.
          schema:
            type: string
        - name: webhookname
          in: query
          description: Name used within the Controller to identify this Webhook.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionUserWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/ExecutionUserWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully assigned execution user "username" to webhook "webhookname".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify webhookname and webhookid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A webhook with name "webhookid" does not exist.
  /resources/webhook:
    get:
      tags:
        - Webhook
      summary: Read a Webhook
      description: Retrieves information on a specific Webhook registration.
      operationId: getWebhook
      parameters:
        - name: webhookid
          in: query
          description: ID used within the Controller to identify this Webhook.
          schema:
            type: string
        - name: webhookname
          in: query
          description: Name used within the Controller to identify this Webhook.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/WebhookWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify webhookname and webhookid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A webhook with id "webookid" does not exist.
    put:
      tags:
        - Webhook
      summary: Modify a Webhook
      description: Modifies the Webhook specified by the sysId.
      operationId: updateWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/WebhookWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated the webhook with id "webhookid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Update webhook failed.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A webhook with id "webhookid" does not exist.
    post:
      tags:
        - Webhook
      summary: Register a Webhook
      description: Registers a Webhook.
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/WebhookWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully created the webhook with id "webhookid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Create webhook failed.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A webhook with id "webhookid" does not exist.
    delete:
      tags:
        - Webhook
      summary: Unregister a Webhook
      description: Unregisters a Webhook.
      operationId: deleteWebhook
      parameters:
        - name: webhookid
          in: query
          description: ID used within the Controller to identify this Webhook.
          schema:
            type: string
        - name: webhookname
          in: query
          description: Name used within the Controller to identify this Webhook.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify webhookname and webhookid at the same time.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify webhookname and webhookid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Webhook deleted successfully.
  /resources/webhook/disable:
    post:
      tags:
        - Webhook
      summary: Disable a Webhook
      description: Disables a Webhook.
      operationId: disableWebhook
      parameters:
        - name: webhookid
          in: query
          description: ID used within the Controller to identify this Webhook.
          schema:
            type: string
        - name: webhookname
          in: query
          description: Name used within the Controller to identify this Webhook.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify webhookname and webhookid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A webhook with name "webhookid" does not exist.
  /resources/webhook/enabledisable:
    post:
      tags:
        - Webhook
      summary: Enable/Disable Webhook(s)
      description: Enables/Disables a list of webhooks.
      operationId: enableDisableWebhookList
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EnableDisableWebhookWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/EnableDisableWebhookListWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Unable to parse JSON input.
  /resources/webhook/enable:
    post:
      tags:
        - Webhook
      summary: Enable a Webhook
      description: Enables a Webhook.
      operationId: enableWebhook
      parameters:
        - name: webhookid
          in: query
          description: ID used within the Controller to identify this Webhook.
          schema:
            type: string
        - name: webhookname
          in: query
          description: Name used within the Controller to identify this Webhook.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/CommandResponseWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify webhookname and webhookid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A webhook with name "webhookid" does not exist.
  /resources/webhook/list:
    get:
      tags:
        - Webhook
      summary: List Webhooks
      description: Retrieves information on Webhook registrations.
      operationId: listWebhooks
      parameters:
        - name: webhookname
          in: query
          description: Name used within the Controller to identify this Webhook.
          schema:
            type: string
        - name: action
          in: query
          description: Type of Action of the Webook.
          schema:
            type: string
        - name: businessServices
          in: query
          description: Business Services that the Webhook belongs to.
          schema:
            type: string
        - name: description
          in: query
          description: User defined description of the Webhook.
          schema:
            type: string
        - name: event
          in: query
          description: System Universal Event Template to be monitored.
          schema:
            type: string
        - name: task
          in: query
          description: 'If action = Launch Task, name of the Task to launch.'
          schema:
            type: string
        - name: taskname
          in: query
          description: 'If action = Launch Task, name of the Task to launch.'
          schema:
            type: string
        - name: url
          in: query
          description: 'If action = Launch Task,'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify webhookname and webhookid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A webhook with id "webookid" does not exist.
  /resources/webhook/unassignexecutionuser:
    post:
      tags:
        - Webhook
      summary: Unassign an Execution User from a Webhook
      description: Unassigns an Execution User from the specified Webhook.
      operationId: unassignExecutionUser_1
      parameters:
        - name: webhookid
          in: query
          description: ID used within the Controller to identify this Webhook.
          schema:
            type: string
        - name: webhookname
          in: query
          description: Name used within the Controller to identify this Webhook.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully unassigned execution user "username" from webhook "webhookname".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify webhookname and webhookid at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A webhook with name "webhookid" does not exist.
  /resources/workflow/edges:
    get:
      tags:
        - Workflow
        - Task
      summary: List Dependencies in a Workflow
      description: 'Returns the list of dependencies for all tasks in a workflow, with each dependency represented by a workflowEdge.'
      operationId: getEdges
      parameters:
        - name: workflowid
          in: query
          description: ID used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: sourceid
          in: query
          description: Vertex ID of the source Task.
          schema:
            type: string
        - name: targetid
          in: query
          description: Vertex ID of the target Task.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either workflowid or workflowname.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A workflow with id "workflowid" does not exist.
    put:
      tags:
        - Workflow
        - Task
      summary: Modify a Dependency in a Workflow
      description: 'Modifies a dependency in a workflow, with the dependency represented by a workflowEdge.'
      operationId: updateEdge
      parameters:
        - name: workflowid
          in: query
          description: ID used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify this Workflow.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskWorkflowEdgePartialWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskWorkflowEdgePartialWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated dependency between "sourceid" and "targetid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify workflowid and workflowname at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A workflow with id "workflowid" does not exist.
    post:
      tags:
        - Workflow
        - Task
      summary: Add a Dependency to a Workflow
      description: 'Adds a dependency to a workflow, with the dependency represented by a workflowEdge.'
      operationId: addEdge
      parameters:
        - name: workflowid
          in: query
          description: ID used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify this Workflow.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskWorkflowEdgeWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskWorkflowEdgeWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully added dependency between "sourceid" and "targetid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify workflowid and workflowname at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A workflow with id "workflowid" does not exist.
    delete:
      tags:
        - Workflow
        - Task
      summary: Remove a Dependency from a Workflow
      description: 'Removes a dependency from a Workflow, with the dependency represented by sourceid and targetid.'
      operationId: deleteEdge
      parameters:
        - name: workflowid
          in: query
          description: ID used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: sourceid
          in: query
          description: Vertex ID of the source Task.
          required: true
          schema:
            type: string
        - name: targetid
          in: query
          description: Vertex ID of the target Task.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully removed dependency between "sourceid" and "targetid".
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify workflowid and workflowname at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A workflow with id "workflowid" does not exist.
  /resources/workflow/vertices:
    get:
      tags:
        - Workflow
        - Task
      summary: List Tasks in a Workflow
      description: 'Returns the list of tasks in a workflow, with each task represented by a workflowVertex.'
      operationId: getVertices
      parameters:
        - name: workflowid
          in: query
          description: ID used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: taskid
          in: query
          description: ID used within the Controller to identify this Task.
          schema:
            type: string
        - name: taskname
          in: query
          description: Name used within the Controller to identify this Task.
          schema:
            type: string
        - name: taskalias
          in: query
          description: Alias of the task(s) to be removed from the Workflow.
          schema:
            type: string
        - name: vertexid
          in: query
          description: 'Vertex ID of the task in the workflow. Each task within a Workflow has a unique Vertex ID to distinguish it from other tasks, if any, of the same name.'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify workflowid and workflowname at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A workflow with id "workflowid" does not exist.
    put:
      tags:
        - Workflow
        - Task
      summary: Modify a Task in a Workflow
      description: 'Modifies a task in a workflow, with the task represented by a workflowVertex.'
      operationId: updateVertex
      parameters:
        - name: workflowid
          in: query
          description: ID used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify this Workflow.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskWorkflowVertexPartialWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskWorkflowVertexPartialWsData'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              example: Successfully updated vertex.
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Required either workflowid or workflowname.
        '404':
          description: Not Found
          content:
            text/plain:
              example: Must specify either a vertexId or task.
    post:
      tags:
        - Workflow
        - Task
      summary: Add a Task to a Workflow
      description: 'Adds a Task to a Workflow, with the Task represented by a workflowVertex.'
      operationId: addVertex
      parameters:
        - name: workflowid
          in: query
          description: ID used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify this Workflow.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskWorkflowVertexWsData'
          application/xml:
            schema:
              $ref: '#/components/schemas/TaskWorkflowVertexWsData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskWorkflowVertexWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskWorkflowVertexWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify workflowid and workflowname at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A workflow with id "workflowid" does not exist.
    delete:
      tags:
        - Workflow
        - Task
      summary: Remove Task(s) from a Workflow
      description: 'Removes one or more tasks from a workflow, with each removed task represented by a workflowVertex .'
      operationId: deleteVertices
      parameters:
        - name: workflowid
          in: query
          description: ID used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: taskid
          in: query
          description: ID used within the Controller to identify this Task.
          schema:
            type: string
        - name: taskname
          in: query
          description: ID used within the Controller to identify this Task.
          schema:
            type: string
        - name: taskalias
          in: query
          description: Alias of the task(s) to be removed from the Workflow.
          schema:
            type: string
        - name: vertexid
          in: query
          description: 'Vertex ID of the task in the workflow. Each task within a Workflow has a unique Vertex ID to distinguish it from other tasks, if any, of the same name.'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskWorkflowVertexWsData'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskWorkflowVertexWsData'
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify workflowid and workflowname at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A workflow with id "workflowid" does not exist.
  /resources/workflow/forecast:
    get:
      tags:
        - Workflow
        - Task
      summary: List Workflow Forecast
      description: Lists the Workflow's Forecast information.
      operationId: getForecast
      parameters:
        - name: workflowid
          in: query
          description: ID used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: workflowname
          in: query
          description: Name used within the Controller to identify this Workflow.
          schema:
            type: string
        - name: calendarid
          in: query
          description: ID used within the Controller to identify the Calendar.
          schema:
            type: string
        - name: calendarname
          in: query
          description: Name used within the Controller to identify the Calendar.
          schema:
            type: string
        - name: triggerid
          in: query
          description: ID used within the Controller to identify the Trigger.
          schema:
            type: string
        - name: triggername
          in: query
          description: Name used within the Controller to identify the Trigger.
          schema:
            type: string
        - name: date
          in: query
          description: Date of the Forecast. Format is yyyy-mm-dd.
          schema:
            type: string
        - name: time
          in: query
          description: 'Time of the Forecast. Format is hh:mm.'
          schema:
            type: string
        - name: timezone
          in: query
          description: Specification of the Timezone.
          schema:
            type: string
        - name: forecastTimezone
          in: query
          description: Specification of the Forecast Timezone.
          schema:
            type: string
        - name: exclude
          in: query
          description: 'Excludes the specified Forecast types in the response. Values are Not Evaluated(1), Run(2), Skip(3), Run*(4), and Skip*(5).'
          schema:
            type: array
            items:
              type: string
        - name: variable
          in: query
          description: 'Overrides the specified Variables. Format is variablename:variablevalue.'
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
            application/xml: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              example: Mutual exclusion violation. Cannot specify workflowid and workflowname at the same time.
        '404':
          description: Not Found
          content:
            text/plain:
              example: A workflow with id "workflowid" does not exist.
components:
  schemas:
    AgentClusterJoinWsData:
      type: object
      properties:
        agentName:
          type: string
        membershipSuspended:
          type: boolean
        membershipSuspendedOn:
          type: string
        membershipResumedOn:
          type: string
        membershipDecommissioned:
          type: boolean
        sysId:
          type: string
        type:
          type: string
    AgentClusterNotificationsWsData:
      type: object
      properties:
        emailNotifications:
          type: array
          items:
            $ref: '#/components/schemas/EmailAgentClusterNotificationWsData'
        snmpNotifications:
          type: array
          items:
            $ref: '#/components/schemas/SnmpAgentClusterNotificationWsData'
    AgentClusterWsData:
      required:
        - type
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        description:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        strictBsrvcMembership:
          type: boolean
        distribution:
          type: string
        networkAlias:
          type: string
        networkAliasPort:
          type: integer
          format: int32
        resolutionStatus:
          type: string
        resolutionDescription:
          type: string
        lastResolution:
          type: string
        limitType:
          type: string
        limitAmount:
          type: integer
          format: int32
        currentCount:
          type: integer
          format: int32
        suspended:
          type: boolean
        suspendedOn:
          type: string
        resumedOn:
          type: string
        agentLimitType:
          type: string
        agentLimitAmount:
          type: integer
          format: int32
        lastAgentUsed:
          type: string
        ignoreInactiveAgents:
          type: boolean
        ignoreSuspendedAgents:
          type: boolean
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        agents:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AgentClusterJoinWsData'
        notifications:
          $ref: '#/components/schemas/AgentClusterNotificationsWsData'
        type:
          type: string
      xml:
        name: agentCluster
      discriminator:
        propertyName: type
    EmailAgentClusterNotificationWsData:
      type: object
      properties:
        state:
          type: string
        sysId:
          type: string
        subject:
          type: string
        body:
          type: string
        to:
          type: string
        cc:
          type: string
        bcc:
          type: string
        replyTo:
          type: string
        emailTemplate:
          type: string
        emailConnection:
          type: string
      xml:
        name: emailAgentClusterNotification
    IbmiAgentClusterWsData:
      type: object
      xml:
        name: ibmiAgentCluster
      allOf:
        - $ref: '#/components/schemas/AgentClusterWsData'
    SnmpAgentClusterNotificationWsData:
      type: object
      properties:
        state:
          type: string
        sysId:
          type: string
        snmpManager:
          type: string
        severity:
          type: string
      xml:
        name: snmpAgentClusterNotification
    UnixAgentClusterWsData:
      type: object
      xml:
        name: unixAgentCluster
      allOf:
        - $ref: '#/components/schemas/AgentClusterWsData'
    WindowsAgentClusterWsData:
      type: object
      xml:
        name: windowsAgentCluster
      allOf:
        - $ref: '#/components/schemas/AgentClusterWsData'
    AgentSimpleWsData:
      type: object
      properties:
        sysID:
          type: string
        name:
          type: string
        type:
          type: string
        version:
          type: string
        hostName:
          type: string
        queueName:
          type: string
        ipAddress:
          type: string
        status:
          type: string
        suspended:
          type: boolean
        outputProhibited:
          type: boolean
        extApiLevelMin:
          type: string
        extApiLevelMax:
          type: string
        extensions:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ExtensionWsData'
        extAccept:
          type: boolean
        extAcceptList:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: extension
        credentialsRequired:
          type: boolean
        transient:
          type: boolean
      xml:
        name: agent
    ExtensionWsData:
      type: object
      properties:
        name:
          type: string
        checksum:
          type: string
          xml:
            attribute: true
      xml:
        name: extension
    CommandResponseWsData:
      type: object
      properties:
        type:
          type: string
        success:
          type: boolean
        info:
          type: string
        errors:
          type: string
      xml:
        name: command-response
    ResolveAgentClusterWsData:
      type: object
      properties:
        agentClusterName:
          type: string
      xml:
        name: resolve-agent-cluster
    ResumeAgentClusterWsData:
      type: object
      properties:
        agentClusterName:
          type: string
      xml:
        name: resume-agent-cluster
    SetAgentClusterTaskExecutionLimitWsData:
      type: object
      properties:
        agentClusterName:
          type: string
        limitType:
          type: string
        limitAmount:
          type: string
      xml:
        name: set-agent-cluster-task-execution-limit
    SuspendAgentClusterWsData:
      type: object
      properties:
        agentClusterName:
          type: string
      xml:
        name: suspend-agent-cluster
    AgentWsData:
      required:
        - type
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        hostName:
          type: string
        queueName:
          type: string
        ipAddress:
          type: string
        logLevel:
          type: string
        version:
          type: string
        build:
          type: string
        buildDate:
          type: string
        extApiLevelMin:
          type: string
        extApiLevelMax:
          type: string
        extensions:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ExtensionWsData'
        extAccept:
          type: boolean
        extAcceptList:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: extension
        hbIntvl:
          type: integer
          format: int32
        hbGracePeriod:
          type: integer
          format: int32
        cpuLoad:
          type: integer
          format: int32
        os:
          type: string
        osRelease:
          type: string
        cpu:
          type: string
        hbDate:
          type: string
        startDate:
          type: string
        status:
          type: string
        jobs:
          type: integer
          format: int32
        credentials:
          type: string
        pid:
          type: string
        limitType:
          type: string
        limitAmount:
          type: integer
          format: int32
        currentCount:
          type: integer
          format: int32
        suspended:
          type: boolean
        decommissioned:
          type: boolean
        decommissionedDate:
          type: string
        outputProhibited:
          type: boolean
        omsServer:
          type: string
        sysId:
          type: string
        authVersion:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        credentialsRequired:
          type: boolean
        notifications:
          $ref: '#/components/schemas/ConnNotificationsWsData'
        transient:
          type: boolean
        type:
          type: string
      xml:
        name: agent
      discriminator:
        propertyName: type
    ConnNotificationsWsData:
      type: object
      properties:
        emailNotifications:
          type: array
          items:
            $ref: '#/components/schemas/EmailConnNotificationWsData'
        snmpNotifications:
          type: array
          items:
            $ref: '#/components/schemas/SnmpConnNotificationWsData'
    EmailConnNotificationWsData:
      type: object
      properties:
        status:
          type: string
        sysId:
          type: string
        subject:
          type: string
        body:
          type: string
        to:
          type: string
        cc:
          type: string
        bcc:
          type: string
        replyTo:
          type: string
        emailTemplate:
          type: string
        emailConnection:
          type: string
      xml:
        name: emailConnNotification
    IbmiAgentWsData:
      type: object
      xml:
        name: ibmiAgent
      allOf:
        - $ref: '#/components/schemas/AgentWsData'
    SecondaryAgent:
      type: object
      properties:
        sysName:
          type: string
        hostName:
          type: string
        ipAddress:
          type: string
        cpu:
          type: string
        os:
          type: string
        osRelease:
          type: string
        pid:
          type: string
        startDate:
          type: string
        version:
          type: string
        build:
          type: string
        buildDate:
          type: string
        mode:
          type: string
    SnmpConnNotificationWsData:
      type: object
      properties:
        status:
          type: string
        sysId:
          type: string
        snmpManager:
          type: string
        severity:
          type: string
      xml:
        name: snmpConnNotification
    UnixAgentWsData:
      type: object
      xml:
        name: unixAgent
      allOf:
        - $ref: '#/components/schemas/AgentWsData'
    WindowsAgentWsData:
      type: object
      xml:
        name: windowsAgent
      allOf:
        - $ref: '#/components/schemas/AgentWsData'
    ZosAgentWsData:
      type: object
      xml:
        name: zosAgent
      allOf:
        - $ref: '#/components/schemas/AgentWsData'
        - type: object
          properties:
            systemName:
              type: string
            secondaryAgentCount:
              type: integer
              format: int32
            secondaryAgents:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/SecondaryAgent'
            secondaryAgentsFromString:
              type: string
              writeOnly: true
    ResumeAgentWsData:
      type: object
      properties:
        agentName:
          type: string
        agentID:
          type: string
      xml:
        name: resume-agent
    ResumeAgentClusterMembershipWsData:
      type: object
      properties:
        agentName:
          type: string
        agentClusterName:
          type: string
        agentID:
          type: string
      xml:
        name: resume-agent-cluster-membership
    SetAgentTaskExecutionLimitWsData:
      type: object
      properties:
        agentName:
          type: string
        agentID:
          type: string
        limitType:
          type: string
        limitAmount:
          type: string
      xml:
        name: set-agent-task-execution-limit
    SuspendAgentWsData:
      type: object
      properties:
        agentName:
          type: string
        agentID:
          type: string
      xml:
        name: suspend-agent
    SuspendAgentClusterMembershipWsData:
      type: object
      properties:
        agentName:
          type: string
        agentClusterName:
          type: string
        agentID:
          type: string
      xml:
        name: suspend-agent-cluster-membership
    AuditFilterWsData:
      type: object
      properties:
        auditType:
          type: string
        source:
          type: string
        status:
          type: string
        createdBy:
          type: string
        tableName:
          type: string
        tableRecordName:
          type: string
        updatedTimeType:
          type: string
        updatedTime:
          type: string
        tableKey:
          type: string
        includeChildAudits:
          type: boolean
      xml:
        name: audit-filter
    BundlePromoteWsData:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        promotionTargetId:
          type: string
        promotionTargetName:
          type: string
        notificationOption:
          type: string
        overrideUser:
          type: string
        overridePassword:
          type: string
        date:
          type: string
        time:
          type: string
        schedule:
          type: string
        createSnapshot:
          type: string
        allowUnvTmpltChanges:
          type: string
        overrideToken:
          type: string
      xml:
        name: bundle-promote
    BundleDetailsWsData:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          xml:
            attribute: true
        type:
          type: string
          xml:
            attribute: true
        addedBy:
          type: string
          xml:
            attribute: true
        sysId:
          type: string
        bundleId:
          type: string
    BundleWsData:
      type: object
      properties:
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        name:
          type: string
        sysId:
          type: string
        description:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        defaultPromotionTarget:
          type: string
        excludeOnExistence:
          type: string
        followReferences:
          type: boolean
        promoteBundleDefinition:
          type: boolean
        promoteByBusinessServices:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: businessService
        visibleTo:
          type: string
        bundleAgentClusters:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleApplications:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleBusinessServices:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleCalendars:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleCredentials:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleCustomDays:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleDatabaseConnections:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleEmailConnections:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleEmailTemplates:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleOAuthClients:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundlePeoplesoftConnections:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleReports:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleSapConnections:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleScripts:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleSnmpManagers:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleTasks:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleTriggers:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleUniversalEventTemplates:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleUniversalTemplates:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleVariables:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        bundleVirtualResources:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BundleDetailsWsData'
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
      xml:
        name: bundle
    BundleRequestWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        businessServices:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: businessService
        typesToInclude:
          type: string
        businessServicesToInclude:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: businessService
        updatedOnOrAfter:
          type: string
      xml:
        name: bundle
    BusinessServiceWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        description:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
      xml:
        name: businessService
    BusinessDaysWrapperWsData:
      type: object
      properties:
        value:
          type: string
        useDefaultIfBlank:
          type: boolean
          xml:
            attribute: true
    CalendarToCustomDayWsData:
      type: object
      properties:
        calendarId:
          type: string
        sysId:
          type: string
        name:
          type: string
    CalendarWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        comments:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        businessDays:
          $ref: '#/components/schemas/BusinessDaysWrapperWsData'
        firstQuarterStart:
          $ref: '#/components/schemas/QuarterWsData'
        secondQuarterStart:
          $ref: '#/components/schemas/QuarterWsData'
        thirdQuarterStart:
          $ref: '#/components/schemas/QuarterWsData'
        fourthQuarterStart:
          $ref: '#/components/schemas/QuarterWsData'
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        firstDayOfWeek:
          type: string
        customDays:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/CalendarToCustomDayWsData'
        localCustomDays:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LocalCustomDayWsData'
      xml:
        name: calendar
    LocalCustomDayWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        comments:
          type: string
        category:
          type: string
        ctype:
          type: string
        month:
          type: string
        dayofweek:
          type: string
        relfreq:
          type: string
        day:
          type: integer
          format: int32
        date:
          type: string
        dateList:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: date
        adjustment:
          type: string
        adjustmentAmount:
          type: integer
          format: int32
        adjustmentType:
          type: string
        nthAmount:
          type: integer
          format: int32
        nthType:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        observedRules:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ObservedRuleWsData'
        calendarId:
          type: string
      xml:
        name: customDay
    ObservedRuleWsData:
      type: object
      properties:
        actualDayOfWeek:
          type: string
        observedDayOfWeek:
          type: string
    QuarterWsData:
      type: object
      properties:
        day:
          type: string
        month:
          type: string
    ClusterNodeWsData:
      type: object
      properties:
        sysId:
          type: string
        nodeMode:
          type: string
        nodeId:
          type: string
        relId:
          type: string
        buildId:
          type: string
        buildDate:
          type: string
        nodeStart:
          type: string
        nodeTs:
          type: string
        nodeUptime:
          type: integer
          format: int64
        nodeUptimeDisplay:
          type: string
        hostName:
          type: string
        ipAddress:
          type: string
        paused:
          type: boolean
        preferred:
          type: boolean
        transitory:
          type: boolean
        pausedForMaintenance:
          type: boolean
      xml:
        name: clusterNode
    ChangeCredentialsPasswordWsData:
      type: object
      properties:
        name:
          type: string
        newRuntimePassword:
          type: string
      xml:
        name: change-credentials-password
    CredentialWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        description:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        runtimeUser:
          type: string
        runtimePassword:
          type: string
        runtimePassPhrase:
          type: string
        runtimeToken:
          type: string
        provider:
          type: string
        providerParameters:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NameValueWsData'
        runtimeKeyLocation:
          type: string
        type:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
      xml:
        name: credential
    NameValueWsData:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    CustomDayWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        comments:
          type: string
        category:
          type: string
        ctype:
          type: string
        month:
          type: string
        dayofweek:
          type: string
        relfreq:
          type: string
        day:
          type: integer
          format: int32
        date:
          type: string
        dateList:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: date
        adjustment:
          type: string
        adjustmentAmount:
          type: integer
          format: int32
        adjustmentType:
          type: string
        nthAmount:
          type: integer
          format: int32
        nthType:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        observedRules:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ObservedRuleWsData'
        period:
          type: boolean
        holiday:
          type: boolean
      xml:
        name: customDay
    DatabaseConnectionWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        dbType:
          type: string
        dbUrl:
          type: string
        dbDriver:
          type: string
        dbMaxRows:
          type: integer
          format: int32
        dbDescription:
          type: string
        credentials:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
      xml:
        name: databaseConnection
    EmailConnectionWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        smtp:
          type: string
        smtpPort:
          type: integer
          format: int32
        smtpSsl:
          type: boolean
        smtpStarttls:
          type: boolean
        emailAddr:
          type: string
        defaultUser:
          type: string
        defaultPwd:
          type: string
        authentication:
          type: boolean
        authenticationType:
          type: string
        oauthClient:
          type: string
        systemConnection:
          type: boolean
        type:
          type: string
        imap:
          type: string
        imapPort:
          type: integer
          format: int32
        imapSsl:
          type: boolean
        imapStarttls:
          type: boolean
        trashFolder:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        description:
          type: string
        authorized:
          type: boolean
        retainSysIds:
          type: boolean
          xml:
            attribute: true
      xml:
        name: emailConnection
    EmailTemplateWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        templateName:
          type: string
        description:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        connection:
          type: string
        replyTo:
          type: string
        to:
          type: string
        cc:
          type: string
        bcc:
          type: string
        subject:
          type: string
        body:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
      xml:
        name: emailTemplate
    LdapMappingWsData:
      type: object
      properties:
        attribute:
          type: string
        type:
          type: string
          xml:
            attribute: true
        column:
          type: string
          xml:
            attribute: true
      xml:
        name: mapping
    LdapWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        url:
          type: string
        bindDn:
          type: string
        bindPassword:
          type: string
        useForAuthentication:
          type: boolean
        allowLocalLogin:
          type: boolean
        baseDn:
          type: string
        userIdAttribute:
          type: string
        userFilter:
          type: string
        groupFilter:
          type: string
        connectTimeout:
          type: integer
          format: int32
        readTimeout:
          type: integer
          format: int32
        userMembershipAttribute:
          type: string
        groupMemberAttribute:
          type: string
        loginMethod:
          type: string
        userTargetOuList:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: targetOu
        groupTargetOuList:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: targetOu
        mappings:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/LdapMappingWsData'
      xml:
        name: ldap
    ClusterRedirectUrlWsData:
      type: object
      properties:
        clusterNode:
          type: string
        redirectUrl:
          type: string
    OAuthClientWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        description:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        provider:
          type: string
        clusterRedirectUrls:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ClusterRedirectUrlWsData'
        authorizationEndpoint:
          type: string
        tokenEndpoint:
          type: string
        tenantId:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        scopes:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: scope
        retainSysIds:
          type: boolean
          xml:
            attribute: true
      xml:
        name: oauthClient
    ClusterBaseRedirectUrlWsData:
      type: object
      properties:
        clusterNode:
          type: string
        baseRedirectUrl:
          type: string
    FifoProperties:
      type: object
      properties:
        keyList:
          type: array
          items:
            type: object
        propertiesAsString:
          type: string
        propertiesAsDisplayValue:
          type: string
        empty:
          type: boolean
      additionalProperties:
        type: string
    OAuthSettingsWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        singleSignOn:
          type: boolean
        issuerUri:
          type: string
        scopes:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: scope
        clientId:
          type: string
        clientSecret:
          type: string
        pkce:
          type: boolean
        userNameClaimName:
          type: string
        clusterBaseRedirectUrls:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ClusterBaseRedirectUrlWsData'
        userProvisioning:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: userProvisioningOption
        attrFirstName:
          type: string
        attrMiddleName:
          type: string
        attrLastName:
          type: string
        attrPhone:
          type: string
        attrHomePhone:
          type: string
        attrMobilePhone:
          type: string
        attrEmail:
          type: string
        attrTitle:
          type: string
        attrManager:
          type: string
        attrDepartment:
          type: string
        attrActive:
          type: string
        attrGroups:
          type: string
        tokenValidation:
          type: string
        opaqueIntrospectionUri:
          type: string
        jwtJwkSetUri:
          type: string
        jwtAudienceClaimValue:
          type: string
        clusterBaseRedirectUrlsFromProperties:
          type: object
          properties:
            keyList:
              type: array
              items:
                type: object
            propertiesAsString:
              type: string
            propertiesAsDisplayValue:
              type: string
            empty:
              type: boolean
          additionalProperties:
            type: string
          writeOnly: true
      xml:
        name: oauthSettings
    OmsServerWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        serverAddress:
          type: string
        description:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        status:
          type: string
        timeout:
          type: integer
          format: int32
        sessionStatus:
          type: string
        suspended:
          type: boolean
        lastConnected:
          type: string
        lastConnectedTime:
          type: string
        authenticate:
          type: boolean
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        notifications:
          $ref: '#/components/schemas/ConnNotificationsWsData'
      xml:
        name: omsServer
    PeoplesoftConnectionWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        description:
          type: string
        server:
          type: string
        port:
          type: integer
          format: int32
        endpoint:
          type: string
        credentials:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
      xml:
        name: peoplesoftConnection
    ItemWsData:
      type: object
      properties:
        name:
          type: string
        user:
          type: string
        group:
          type: string
    PromoteWsData:
      type: object
      properties:
        itemType:
          type: string
        itemIds:
          type: string
        itemNames:
          type: string
        items:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ItemWsData'
        promotionTargetId:
          type: string
        promotionTargetName:
          type: string
        overrideUser:
          type: string
        overridePassword:
          type: string
        excludeOnExistence:
          type: string
        followReferences:
          type: string
        allowUnvTmpltChanges:
          type: string
        overrideToken:
          type: string
      xml:
        name: promote
    AgentMappingWsData:
      type: object
      properties:
        targetAgent:
          type: string
        sourceAgents:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: sourceAgent
        type:
          type: string
    PromotionTargetWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        name:
          type: string
        description:
          type: string
        uri:
          type: string
        user:
          type: string
        password:
          type: string
        authenticationMethod:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        token:
          type: string
        agentMappings:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AgentMappingWsData'
      xml:
        name: promotionTarget
    UserPwdWsData:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        token:
          type: string
      xml:
        name: overrideUser
    LabelValueWsData:
      type: object
      properties:
        value:
          type: string
        label:
          type: string
          xml:
            attribute: true
      xml:
        name: labelValue
    PropertyWsData:
      type: object
      properties:
        value:
          type: string
        name:
          $ref: '#/components/schemas/LabelValueWsData'
      xml:
        name: property
    SapConnectionWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        sapConnectionType:
          type: string
        sapAshost:
          type: string
        sapClient:
          type: string
        sapSysnr:
          type: string
        sapGwhost:
          type: string
        sapGwserv:
          type: string
        sapR3name:
          type: string
        sapMshost:
          type: string
        sapGroup:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        description:
          type: string
        sapSaprouter:
          type: string
        sapSncMode:
          type: string
        sapSncLib:
          type: string
        sapSncMyname:
          type: string
        sapSncPartnername:
          type: string
        sapSncQop:
          type: string
        sapSncSso:
          type: string
        sapMysapsso2:
          type: string
        sapX509cert:
          type: string
        sapUseSymbolicNames:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
      xml:
        name: sapConnection
    NoteWsData:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        sysId:
          type: string
      xml:
        name: note
    ScriptWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        scriptName:
          type: string
        scriptType:
          type: string
        description:
          type: string
        content:
          type: string
        resolveVariables:
          type: boolean
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        notes:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NoteWsData'
      xml:
        name: script
    BulkExportResponseWsData:
      type: object
      properties:
        operation:
          type: string
        success:
          type: boolean
        output:
          type: string
        path:
          type: string
      xml:
        name: serverOperationResponse
    SimulationOutputWsData:
      type: object
      properties:
        outputType:
          type: string
        outputData:
          type: string
        outputFileName:
          type: string
        sysId:
          type: string
      xml:
        name: output
    SimulationWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        task:
          type: string
        workflow:
          type: string
        vertexId:
          type: string
        status:
          type: string
        exitCode:
          type: string
        publishStatus:
          type: boolean
        publishLateStart:
          type: boolean
        publishLateFinish:
          type: boolean
        publishEarlyFinish:
          type: boolean
        abortActions:
          type: boolean
        emailNotificationActions:
          type: boolean
        variableActions:
          type: boolean
        snmpNotificationActions:
          type: boolean
        systemOperationActions:
          type: boolean
        otherOptions:
          type: string
        outputs:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/SimulationOutputWsData'
        variablesFromString:
          type: string
          writeOnly: true
        variables:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NameValueWsData'
      xml:
        name: simulation
    SnmpConnectionWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        managerAddress:
          type: string
        managerPort:
          type: integer
          format: int32
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        trapCommunity:
          type: string
        description:
          type: string
      xml:
        name: snmpManager
    WidgetSystemWsData:
      type: object
      properties:
        license:
          type: string
        licenseExpired:
          type: boolean
        nodeId:
          type: string
        nodeMode:
          type: string
        nodeUptime:
          type: string
        nodeTime:
          type: string
        release:
          type: string
        build:
          type: string
        buildDate:
          type: string
        databaseType:
          type: string
        databaseName:
          type: string
        databaseURL:
          type: string
        databaseConnections:
          type: string
        memoryMaximum:
          type: string
        memoryUsed:
          type: string
        memoryFree:
          type: string
      xml:
        name: status
    TaskInstanceWsData:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        criteria:
          type: string
        workflowInstanceName:
          type: string
        resourceName:
          type: string
        recursive:
          type: boolean
        predecessorName:
          type: string
        waitType:
          type: string
        waitTime:
          type: string
        waitDuration:
          type: string
        waitSeconds:
          type: string
        waitDayConstraint:
          type: string
        delayType:
          type: string
        delayDuration:
          type: string
        delaySeconds:
          type: string
        halt:
          type: boolean
        priorityType:
          type: string
        taskStatus:
          type: string
        operationalMemo:
          type: string
        holdReason:
          type: string
      xml:
        name: task-instance
    TaskInstanceStatusRequestWsData:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        criteria:
          type: string
        workflowInstanceName:
          type: string
        resourceName:
          type: string
        recursive:
          type: boolean
        predecessorName:
          type: string
        waitType:
          type: string
        waitTime:
          type: string
        waitDuration:
          type: string
        waitSeconds:
          type: string
        waitDayConstraint:
          type: string
        delayType:
          type: string
        delayDuration:
          type: string
        delaySeconds:
          type: string
        halt:
          type: boolean
        priorityType:
          type: string
        taskStatus:
          type: string
        operationalMemo:
          type: string
        holdReason:
          type: string
        agentName:
          type: string
        workflowInstanceCriteria:
          type: string
        workflowInstanceId:
          type: string
        status:
          type: string
        type:
          type: string
        executionUser:
          type: string
        lateStart:
          type: string
        lateFinish:
          type: string
        earlyFinish:
          type: string
        startedLate:
          type: string
        finishedLate:
          type: string
        finishedEarly:
          type: string
        late:
          type: string
        lateEarly:
          type: string
        businessServices:
          type: string
        updatedTimeType:
          type: string
        updatedTime:
          type: string
        sysId:
          type: string
        instanceNumber:
          type: integer
          format: int32
        taskId:
          type: string
        taskName:
          type: string
        customField1:
          type: string
        customField2:
          type: string
        triggerId:
          type: string
        triggerName:
          type: string
        workflowDefinitionId:
          type: string
        workflowDefinitionName:
          type: string
        statusDescription:
          type: string
        templateId:
          type: string
        templateName:
          type: string
        responseFields:
          type: string
        instanceOutputType:
          type: string
      xml:
        name: task-instance-query-filter
    VariableReportItemWsData:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        valueResolved:
          type: string
        instanceName:
          type: string
        instanceId:
          type: string
        inherited:
          type: boolean
      xml:
        name: variable
    VariableReportWsData:
      type: object
      properties:
        instanceName:
          type: string
        instanceId:
          type: string
        status:
          type: string
        statusDescription:
          type: string
        invokedBy:
          type: string
        executionUser:
          type: string
        variables:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/VariableReportItemWsData'
      xml:
        name: showVariables
    TaskInsertWsData:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        alias:
          type: string
        workflowInstanceId:
          type: string
        workflowInstanceName:
          type: string
        workflowInstanceCriteria:
          type: string
        predecessors:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: predecessor
        successors:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: successor
        vertexX:
          type: string
        vertexY:
          type: string
        inheritTriggerTime:
          type: string
      xml:
        name: task-insert
    AbortActionWsData:
      type: object
      properties:
        status:
          type: string
        notifyOnLateStart:
          type: boolean
        notifyOnLateFinish:
          type: boolean
        notifyOnEarlyFinish:
          type: boolean
        notifyOnProjectedLate:
          type: boolean
        exitCodes:
          type: string
        description:
          type: string
        inheritance:
          type: string
        sysId:
          type: string
        cancelProcess:
          type: boolean
        overrideExitCode:
          type: string
        haltOnFinish:
          type: boolean
      xml:
        name: abort-action
    ActionWsData:
      type: object
      properties:
        setVariableActions:
          type: array
          items:
            $ref: '#/components/schemas/VariableActionWsData'
        abortActions:
          type: array
          items:
            $ref: '#/components/schemas/AbortActionWsData'
        emailNotifications:
          type: array
          items:
            $ref: '#/components/schemas/EmailNotificationWsData'
        snmpNotifications:
          type: array
          items:
            $ref: '#/components/schemas/SnmpNotificationWsData'
        systemOperations:
          type: array
          items:
            $ref: '#/components/schemas/SystemOperationNotificationWsData'
    ArrayFieldWsData:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        label:
          type: string
          xml:
            attribute: true
        nameTitle:
          type: string
          xml:
            attribute: true
        valueTitle:
          type: string
          xml:
            attribute: true
        fields:
          type: array
          xml:
            name: field
          items:
            $ref: '#/components/schemas/NameValueWsData'
      xml:
        name: field
    BooleanFieldWsData:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        label:
          type: string
          xml:
            attribute: true
        value:
          type: boolean
      xml:
        name: field
    ComplexDayWrapperWsData:
      type: object
      properties:
        value:
          type: string
        local:
          type: boolean
          xml:
            attribute: true
    CompoundConditionWsData:
      type: object
      allOf:
        - $ref: '#/components/schemas/ConditionWsData'
        - type: object
          properties:
            logicalOperator:
              type: string
    ConditionExpressionWsData:
      type: object
      properties:
        logicalOperator:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/ConditionWsData'
      xml:
        name: conditionExpression
    ConditionWsData:
      required:
        - type
      type: object
      properties:
        vertexId:
          type: string
        type:
          type: string
      discriminator:
        propertyName: type
    CriteriaWsData:
      type: object
      allOf:
        - $ref: '#/components/schemas/CriterionWsData'
        - type: object
          properties:
            logicalOperator:
              type: string
    CriterionWsData:
      required:
        - type
      type: object
      properties:
        name:
          type: string
        operator:
          type: string
        value:
          type: string
        values:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: value
        start:
          $ref: '#/components/schemas/Start'
        end:
          $ref: '#/components/schemas/End'
        type:
          type: string
      discriminator:
        propertyName: type
    CustomFieldWsData:
      type: object
      properties:
        label:
          type: string
          xml:
            attribute: true
        value:
          type: string
      xml:
        name: customField
    Directive:
      type: object
      properties:
        step:
          type: string
        procedure:
          type: string
        type:
          type: string
    DistributionOptionWsData:
      type: object
      properties:
        distributionIdType:
          type: string
        distributionId:
          type: string
    EdgeVertexWsData:
      type: object
      properties:
        taskName:
          type: string
          xml:
            attribute: true
        taskAlias:
          type: string
          xml:
            attribute: true
        value:
          type: string
    EmailNotificationWsData:
      type: object
      properties:
        status:
          type: string
        notifyOnLateStart:
          type: boolean
        notifyOnLateFinish:
          type: boolean
        notifyOnEarlyFinish:
          type: boolean
        notifyOnProjectedLate:
          type: boolean
        exitCodes:
          type: string
        description:
          type: string
        inheritance:
          type: string
        sysId:
          type: string
        subject:
          type: string
        body:
          type: string
        to:
          type: string
        cc:
          type: string
        bcc:
          type: string
        replyTo:
          type: string
        emailTemplate:
          type: string
        emailTemplateVar:
          type: string
        emailConnection:
          type: string
        attachStdError:
          type: boolean
        attachStdOut:
          type: boolean
        attachFile:
          type: boolean
        fileName:
          type: string
        fileNumLines:
          type: integer
          format: int32
        fileStartLine:
          type: integer
          format: int32
        fileScanText:
          type: string
        stderrNumLines:
          type: integer
          format: int32
        stderrStartLine:
          type: integer
          format: int32
        stderrScanText:
          type: string
        stdoutNumLines:
          type: integer
          format: int32
        stdoutStartLine:
          type: integer
          format: int32
        stdoutScanText:
          type: string
        attachJobLog:
          type: boolean
        joblogStartLine:
          type: integer
          format: int32
        joblogNumLines:
          type: integer
          format: int32
        joblogScanText:
          type: string
        reportId:
          type: string
        reportVar:
          type: string
        useReportVar:
          type: string
        listReportFormat:
          type: string
        attachLocalFile:
          type: boolean
        localAttachment:
          type: string
        localAttachmentsPath:
          type: string
        report:
          $ref: '#/components/schemas/ReportReferenceWsData'
      xml:
        name: email-notification
    End:
      type: object
      properties:
        value:
          type: string
    FilterWsData:
      type: object
      properties:
        logicalOperator:
          type: string
        criteria:
          type: array
          items:
            $ref: '#/components/schemas/CriterionWsData'
      xml:
        name: filter
    FloatFieldWsData:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        label:
          type: string
          xml:
            attribute: true
        value:
          type: number
          format: double
      xml:
        name: field
    IntFieldWsData:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        label:
          type: string
          xml:
            attribute: true
        value:
          type: integer
          format: int32
      xml:
        name: field
    OverrideVariableWsData:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        resolution:
          type: string
    ReportReferenceWsData:
      type: object
      properties:
        title:
          type: string
        userName:
          type: string
        groupName:
          type: string
        groupNames:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: groupName
      xml:
        name: report
    SapAbapProgramJobStepWsData:
      type: object
      allOf:
        - $ref: '#/components/schemas/SapJobStepWsData'
        - type: object
          properties:
            language:
              type: string
            variantName:
              type: string
            useTemporaryVariant:
              type: boolean
            temporaryVariant:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/SapTemporaryVariantParameterWsData'
            printParameters:
              $ref: '#/components/schemas/SapPrintParametersWsData'
            temporaryVariantFromString:
              type: string
              writeOnly: true
    SapCoverSheetsWsData:
      type: object
      properties:
        sapCoverSheet:
          type: string
        osCoverSheet:
          type: string
        selectionCoverSheet:
          type: string
        receivers:
          type: string
        department:
          type: string
      xml:
        name: coverSheets
    SapEmailNotificationWsData:
      type: object
      properties:
        notifyType:
          type: string
        recipient:
          type: string
        language:
          type: string
      xml:
        name: emailNotification
    SapExternalCommandJobStepWsData:
      type: object
      allOf:
        - $ref: '#/components/schemas/SapJobStepWsData'
        - type: object
          properties:
            parameters:
              type: string
            targetServer:
              type: string
            logOutput:
              type: string
            logErrors:
              type: string
            waitForTermination:
              type: string
            traceLevel:
              type: string
            operatingSystem:
              type: string
    SapExternalProgramJobStepWsData:
      type: object
      allOf:
        - $ref: '#/components/schemas/SapJobStepWsData'
        - type: object
          properties:
            parameters:
              type: string
            targetServer:
              type: string
            logOutput:
              type: string
            logErrors:
              type: string
            waitForTermination:
              type: string
            traceLevel:
              type: string
    SapJobStepWsData:
      required:
        - type
      type: object
      properties:
        sysId:
          type: string
        stepOrder:
          type: integer
          format: int32
        programName:
          type: string
        username:
          type: string
        type:
          type: string
      discriminator:
        propertyName: type
    SapOutputContentWsData:
      type: object
      properties:
        maxSpoolWidth:
          type: string
        textOnly:
          type: string
        noShade:
          type: string
        noFrame:
          type: string
        structureInformation:
          type: string
      xml:
        name: outputContent
    SapOutputOptionsWsData:
      type: object
      properties:
        deleteAfterPrinting:
          type: string
        spoolRetention:
          type: string
        newSpoolRequest:
          type: string
        printPriority:
          type: string
        storageMode:
          type: string
        objectType:
          type: string
        documentType:
          type: string
        information:
          type: string
        text:
          type: string
      xml:
        name: outputOptions
    SapPrintParametersWsData:
      type: object
      properties:
        pageArea:
          type: string
        printTime:
          type: string
        numberOfCopies:
          type: integer
          format: int32
        pageFrom:
          type: integer
          format: int32
        pageTo:
          type: integer
          format: int32
        outputDevice:
          type: string
        format:
          type: string
        outputContent:
          $ref: '#/components/schemas/SapOutputContentWsData'
        spoolRequest:
          $ref: '#/components/schemas/SapSpoolRequestWsData'
        coverSheets:
          $ref: '#/components/schemas/SapCoverSheetsWsData'
        outputOptions:
          $ref: '#/components/schemas/SapOutputOptionsWsData'
      xml:
        name: printParameter
    SapSpoolListRecipientWsData:
      type: object
      properties:
        mailStatus:
          type: string
        recipient:
          type: string
        recipientType:
          type: string
        copy:
          type: boolean
        blindCopy:
          type: boolean
        express:
          type: boolean
        noForwarding:
          type: boolean
        deliver:
          type: string
      xml:
        name: spoolListRecipient
    SapSpoolRequestWsData:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        authorization:
          type: string
      xml:
        name: spoolRequest
    SapTemporaryVariantParameterWsData:
      type: object
      properties:
        technicalName:
          type: string
        type:
          type: string
        low:
          type: string
        high:
          type: string
        option:
          type: string
        sign:
          type: string
    SnmpNotificationWsData:
      type: object
      properties:
        status:
          type: string
        notifyOnLateStart:
          type: boolean
        notifyOnLateFinish:
          type: boolean
        notifyOnEarlyFinish:
          type: boolean
        notifyOnProjectedLate:
          type: boolean
        exitCodes:
          type: string
        description:
          type: string
        inheritance:
          type: string
        sysId:
          type: string
        snmpManager:
          type: string
        severity:
          type: string
      xml:
        name: snmp-notification
    Start:
      type: object
      properties:
        value:
          type: string
    SystemOperationNotificationWsData:
      type: object
      properties:
        status:
          type: string
        notifyOnLateStart:
          type: boolean
        notifyOnLateFinish:
          type: boolean
        notifyOnEarlyFinish:
          type: boolean
        notifyOnProjectedLate:
          type: boolean
        exitCodes:
          type: string
        description:
          type: string
        inheritance:
          type: string
        sysId:
          type: string
        execId:
          type: string
        agentVarCheck:
          type: string
        agentClusterVarCheck:
          type: string
        notificationOption:
          type: string
        vertices:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/VertexWsData'
        execLookupOption:
          type: string
        overrideTriggerDateTime:
          type: boolean
        virtualResourceVarCheck:
          type: string
        operation:
          type: string
        taskLimitType:
          type: string
        virtualResource:
          type: string
        execCommand:
          type: string
        execName:
          type: string
        variablesUnresolved:
          type: boolean
        execCriteria:
          type: string
        execWorkflowNameCond:
          type: string
        execWorkflowName:
          type: string
        overrideTriggerTime:
          type: string
        vertexSelection:
          type: boolean
        taskVar:
          type: string
        triggerVar:
          type: string
        overrideTriggerDateOffset:
          type: string
        virtualResourceVar:
          type: string
        agentVar:
          type: string
        agentClusterVar:
          type: string
        limit:
          type: string
        task:
          type: string
        agentCluster:
          type: string
        trigger:
          type: string
        agent:
          type: string
        variables:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NameValueWsData'
      xml:
        name: system-operation
    Task:
      type: object
      properties:
        sysId:
          type: string
          xml:
            attribute: true
        value:
          type: string
      xml:
        name: task
    TaskAgentWsData:
      required:
        - name
        - type
      type: object
      xml:
        name: task
      discriminator:
        propertyName: type
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            agent:
              type: string
            agentVar:
              type: string
            agentVarCheck:
              type: string
            agentCluster:
              type: string
            agentClusterVar:
              type: string
            agentClusterVarCheck:
              type: string
            broadcastCluster:
              type: string
            broadcastClusterVar:
              type: string
            broadcastClusterVarCheck:
              type: string
            type:
              type: string
    TaskApplicationControlWsData:
      required:
        - name
      type: object
      xml:
        name: taskApplicationControl
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            application:
              type: string
            command:
              type: string
    TaskCriticalEndpointWsData:
      type: object
      properties:
        sysId:
          type: string
        description:
          type: string
        task:
          type: string
        vertexId:
          type: string
        lsEnabled:
          type: boolean
        lsType:
          type: string
        lsTime:
          type: string
        lsDayConstraint:
          type: string
        lsNthAmount:
          type: integer
          format: int32
        lsDuration:
          type: string
        lfEnabled:
          type: boolean
        lfType:
          type: string
        lfTime:
          type: string
        lfDayConstraint:
          type: string
        lfNthAmount:
          type: integer
          format: int32
        lfDuration:
          type: string
        lfOffsetType:
          type: string
        lfOffsetPercentage:
          type: integer
          format: int32
        lfOffsetDuration:
          type: string
        lfOffsetDurationUnit:
          type: string
        userEstimatedDuration:
          type: string
      xml:
        name: criticalEndpoint
    TaskDistributedAgentWsData:
      required:
        - name
        - type
      type: object
      xml:
        name: task
      discriminator:
        propertyName: type
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            command:
              type: string
            commandOrScript:
              type: string
            script:
              type: string
            runtimeDir:
              type: string
            parameters:
              type: string
            exitCodes:
              type: string
            exitCodeProcessing:
              type: string
            exitCodeText:
              type: string
            exitCodeOutput:
              type: string
            outputType:
              type: string
            retryExitCodes:
              type: string
            runAsSudo:
              type: boolean
            waitForOutput:
              type: boolean
            outputFailureOnly:
              type: boolean
            outputReturnType:
              type: string
            outputReturnFile:
              type: string
            outputReturnSline:
              type: string
            outputReturnNline:
              type: string
            outputReturnText:
              type: string
            environment:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/NameValueWsData'
            environmentFromString:
              type: string
              writeOnly: true
            type:
              type: string
    TaskEmailCriteriaWsData:
      type: object
      properties:
        sysId:
          type: string
        fromFilter:
          type: string
        from:
          type: string
        toFilter:
          type: string
        to:
          type: string
        ccFilter:
          type: string
        cc:
          type: string
        subjectFilter:
          type: string
        subject:
          type: string
        bodyFilter:
          type: string
        body:
          type: string
        caseSensitive:
          type: boolean
        filterLogic:
          type: string
      xml:
        name: emailCriterion
    TaskEmailMonitorWsData:
      required:
        - name
      type: object
      xml:
        name: taskEmailMonitor
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            connection:
              type: string
            connectionVar:
              type: string
            useAdvancedCriteria:
              type: boolean
            sentRestriction:
              type: string
            sentOn:
              type: string
            sentOnDate:
              type: string
            sentBefore:
              type: string
            sentBeforeDate:
              type: string
            sentBeforeOffset:
              type: string
            sentAfter:
              type: string
            sentAfterDate:
              type: string
            sentAfterOffset:
              type: string
            receivedRestriction:
              type: string
            receivedOn:
              type: string
            receivedOnDate:
              type: string
            receivedBefore:
              type: string
            receivedBeforeDate:
              type: string
            receivedBeforeOffset:
              type: string
            receivedAfter:
              type: string
            receivedAfterDate:
              type: string
            receivedAfterOffset:
              type: string
            includeReadEmail:
              type: boolean
            mailboxFolder:
              type: string
            action:
              type: string
            mailboxFolderDestination:
              type: string
            moveToTrash:
              type: boolean
            fromFilter:
              type: string
            from:
              type: string
            toFilter:
              type: string
            to:
              type: string
            ccFilter:
              type: string
            cc:
              type: string
            subjectFilter:
              type: string
            subject:
              type: string
            bodyFilter:
              type: string
            body:
              type: string
            caseSensitive:
              type: boolean
            filterLogic:
              type: string
            timeLimit:
              type: string
            timeLimitUnit:
              type: string
            bodyVariables:
              type: string
            bodyBeginMarker:
              type: string
            bodyEndMarker:
              type: string
            contentProcessingType:
              type: string
            contentValue:
              type: string
            csContentProcessing:
              type: boolean
            expirationAction:
              type: string
            emailCriteria:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskEmailCriteriaWsData'
    TaskEmailWsData:
      required:
        - name
      type: object
      xml:
        name: taskEmail
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            connection:
              type: string
            template:
              type: string
            templateVar:
              type: string
            replyTo:
              type: string
            toRecipients:
              type: string
            ccRecipients:
              type: string
            bccRecipients:
              type: string
            subject:
              type: string
            body:
              type: string
            reportVar:
              type: string
            listReportFormat:
              type: string
            attachLocalFile:
              type: boolean
            localAttachmentsPath:
              type: string
            localAttachment:
              type: string
            report:
              $ref: '#/components/schemas/ReportReferenceWsData'
    TaskFileMonitorWsData:
      required:
        - name
      type: object
      xml:
        name: taskFileMonitor
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            fileName:
              type: string
            useRegex:
              type: boolean
            stableSeconds:
              type: integer
              format: int32
            fmtype:
              type: string
            recursive:
              type: boolean
            fileOwner:
              type: string
            fileGroup:
              type: string
            scanText:
              type: string
            scanForward:
              type: boolean
            maxFiles:
              type: integer
              format: int32
            toSize:
              type: number
            bySize:
              type: number
            byPercentage:
              type: number
            toScale:
              type: integer
              format: int32
            byScale:
              type: integer
              format: int32
            triggerOnExist:
              type: boolean
            minFileSize:
              type: string
            minFileScale:
              type: string
            triggerOnCreate:
              type: boolean
    TaskFtpFileMonitorWsData:
      required:
        - name
      type: object
      xml:
        name: taskFtpFileMonitor
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            wait:
              type: boolean
            pollInterval:
              type: integer
              format: int32
            pollMaximum:
              type: integer
              format: int32
            stableSeconds:
              type: integer
              format: int32
            useRegex:
              type: boolean
            ftpFmtype:
              type: string
            servertype:
              type: string
            authenticatePeer:
              type: boolean
            verifyHostName:
              type: boolean
            listOptions:
              type: string
            transferMode:
              type: string
            remoteServer:
              type: string
            remoteFilename:
              type: string
            remoteCredentials:
              type: string
            remoteCredVar:
              type: string
            remoteCredVarCheck:
              type: string
            minFileSize:
              type: string
            minFileScale:
              type: string
            waitForOutput:
              type: boolean
            outputFailureOnly:
              type: boolean
            outputReturnType:
              type: string
            outputReturnSline:
              type: string
            outputReturnNline:
              type: string
            outputReturnText:
              type: string
            jobcard:
              type: string
    TaskFtpWsData:
      required:
        - name
      type: object
      xml:
        name: taskFtp
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            remoteServer:
              type: string
            remoteFilename:
              type: string
            localFilename:
              type: string
            useRegex:
              type: boolean
            jobcard:
              type: string
            transferMode:
              type: string
            command:
              type: string
            ftpSubcommands:
              type: string
            move:
              type: boolean
            remoteCredentials:
              type: string
            remoteCredVar:
              type: string
            remoteCredVarCheck:
              type: string
            serverType:
              type: string
            authenticatePeer:
              type: boolean
            verifyHostName:
              type: boolean
            encrypt:
              type: string
            compress:
              type: string
            codepage:
              type: string
            createop:
              type: string
            nft:
              type: boolean
            trimSpace:
              type: boolean
            showProgress:
              type: boolean
            runtimeDir:
              type: string
            formOrScript:
              type: string
            script:
              type: string
            format:
              type: string
            primaryFilesys:
              type: string
            primaryOpenOptions:
              type: string
            primaryCredentials:
              type: string
            primaryCredVar:
              type: string
            primaryCredVarCheck:
              type: string
            primaryBrokerRef:
              type: string
            primaryBroker:
              type: string
            primaryBrokerChoice:
              type: string
            primaryBrokerVarCheck:
              type: string
            primaryClusterRef:
              type: string
            primaryCluster:
              type: string
            primaryClusterVarCheck:
              type: string
            secondaryFilesys:
              type: string
            secondaryOpenOptions:
              type: string
            secondaryCredentials:
              type: string
            secondaryCredVar:
              type: string
            secondaryCredVarCheck:
              type: string
            secondaryBrokerRef:
              type: string
            secondaryBroker:
              type: string
            secondaryBrokerChoice:
              type: string
            secondaryBrokerVarCheck:
              type: string
            secondaryClusterRef:
              type: string
            secondaryCluster:
              type: string
            secondaryClusterVarCheck:
              type: string
            udmOptions:
              type: string
            udmOperation:
              type: string
            transferDirection:
              type: string
            exitCodes:
              type: string
            exitCodeProcessing:
              type: string
            exitCodeText:
              type: string
            exitCodeOutput:
              type: string
            outputType:
              type: string
            retryExitCodes:
              type: string
    TaskIbmiWsData:
      required:
        - name
      type: object
      xml:
        name: taskIbmi
      allOf:
        - $ref: '#/components/schemas/TaskDistributedAgentWsData'
        - type: object
          properties:
            commandType:
              type: string
    TaskManualWsData:
      required:
        - name
      type: object
      xml:
        name: taskManual
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
    TaskMonitorWsData:
      required:
        - name
      type: object
      xml:
        name: taskMonitor
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            monType:
              type: string
            taskMonName:
              type: string
            taskNameLookup:
              type: string
            taskNameValue:
              type: string
            taskNameValueResolve:
              type: boolean
            wfConditionType:
              type: string
            wfConditionValue:
              type: string
            relativeTimeTo:
              type: string
            relativeTimeFrom:
              type: string
            timeScope:
              type: string
            statusText:
              type: string
            typeText:
              type: string
            expirationAction:
              type: string
            monitorLateStart:
              type: boolean
            monitorLateFinish:
              type: boolean
            monitorEarlyFinish:
              type: boolean
    TaskPeoplesoftRtParamWsData:
      type: object
      properties:
        sysId:
          type: string
        processName:
          type: string
        processType:
          type: string
        parameterName:
          type: string
        parameterValue:
          type: string
      xml:
        name: runtimeParameter
    TaskPeoplesoftWsData:
      required:
        - name
      type: object
      xml:
        name: taskPeoplesoft
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            exitCodes:
              type: string
            exitCodeProcessing:
              type: string
            exitCodeText:
              type: string
            exitCodeOutput:
              type: string
            outputReturnType:
              type: string
            outputReturnFile:
              type: string
            outputReturnSline:
              type: string
            outputReturnNline:
              type: string
            outputReturnText:
              type: string
            outputType:
              type: string
            waitForOutput:
              type: boolean
            outputFailureOnly:
              type: boolean
            connection:
              type: string
            connectionVar:
              type: string
            psCredentials:
              type: string
            psCredentialsVar:
              type: string
            printDistList:
              type: boolean
            printParamList:
              type: boolean
            printAppMessage:
              type: boolean
            printSystemMessage:
              type: boolean
            printJobTree:
              type: boolean
            report:
              type: boolean
            contentFilter:
              type: string
            command:
              type: string
            runControlId:
              type: string
            processType:
              type: string
            processName:
              type: string
            serverName:
              type: string
            outputDestType:
              type: string
            outputDestFormat:
              type: string
            outputDestString:
              type: string
            reportFolderName:
              type: string
            processFileName:
              type: string
            retentionDays:
              type: integer
              format: int32
            mainJobName:
              type: string
            mainSchedName:
              type: string
            emailSubject:
              type: string
            emailText:
              type: string
            emailAddresses:
              type: string
            emailAttachLog:
              type: boolean
            emailWebReport:
              type: boolean
            distributionOptions:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/DistributionOptionWsData'
            runtimeParameters:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskPeoplesoftRtParamWsData'
            distributionOptionsFromString:
              type: string
              writeOnly: true
    TaskRecurringWsData:
      required:
        - name
      type: object
      xml:
        name: taskRecurring
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            indefiniteRecurrences:
              type: boolean
            intervalStartTime:
              type: string
            intervalEndTime:
              type: string
            intervalStartDayConstraint:
              type: string
            intervalEndDayConstraint:
              type: string
            numberOfRecurrences:
              type: string
            overrideVariables:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/OverrideVariableWsData'
            recurrenceInterval:
              type: string
            recurrenceIntervalUnit:
              type: string
            recurrenceType:
              type: string
            targetTask:
              type: string
            recurrenceTimeList:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TimeListWsData'
            timeWindow:
              type: boolean
            skipCondition:
              type: string
            targetTaskMonitorCondition:
              type: string
            targetTaskStatusText:
              type: string
            retentionDurationPurgeRt:
              type: boolean
            retentionDurationRt:
              type: integer
              format: int32
            retentionDurationUnitRt:
              type: string
            rdExcludeBackupRt:
              type: boolean
            timeListFromString:
              type: string
              writeOnly: true
            overrideVariablesFromString:
              type: string
              writeOnly: true
    TaskRunCriteriaWsData:
      type: object
      properties:
        sysId:
          type: string
        type:
          type: string
        businessDay:
          type: boolean
        specificDay:
          type: boolean
        holiday:
          type: boolean
        holidayAdjustment:
          type: string
        holidayAdjustmentAmount:
          type: integer
          format: int32
        holidayAdjustmentType:
          type: string
        specificDaySun:
          type: boolean
        specificDayMon:
          type: boolean
        specificDayTue:
          type: boolean
        specificDayWed:
          type: boolean
        specificDayThu:
          type: boolean
        specificDayFri:
          type: boolean
        specificDaySat:
          type: boolean
        customDay:
          type: boolean
        customDayChoice:
          type: string
        variable:
          type: boolean
        evaluateAt:
          type: string
        variableName:
          type: string
        variableValue:
          type: string
        variableOp:
          type: string
        complex:
          type: boolean
        complexAdjective:
          type: string
        complexNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        complexNouns:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ComplexDayWrapperWsData'
        complexQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        complexQualifiers:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ComplexDayWrapperWsData'
        complexNthAmount:
          type: integer
          format: int32
        complexAdjustment:
          type: string
        complexAdjustmentAmount:
          type: integer
          format: int32
        complexAdjustmentType:
          type: string
        description:
          type: string
        task:
          type: string
        vertexId:
          type: string
        complexNounsFromString:
          type: string
          writeOnly: true
        complexQualifiersFromString:
          type: string
          writeOnly: true
      xml:
        name: runCriterion
    TaskSQLWsData:
      required:
        - name
      type: object
      xml:
        name: taskSql
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            connectionVar:
              type: string
            sqlCommand:
              type: string
            maxRows:
              type: integer
              format: int32
            autoCleanup:
              type: boolean
            resultProcessing:
              type: string
            exitCodes:
              type: string
            columnName:
              type: string
            columnOp:
              type: string
            columnValue:
              type: string
            connection:
              type: string
    TaskSapWsData:
      required:
        - name
      type: object
      xml:
        name: taskSap
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            pcRestart:
              type: boolean
            commandGroup:
              type: string
            commandOptions:
              type: string
            dataSource:
              type: string
            definitionOrModel:
              type: string
            definitionOrModelJobVar:
              type: string
            defFile:
              type: string
            dispAbapName:
              type: string
            sapCommandMask:
              type: string
            dispSapEventId:
              type: string
            dispSapEventParm:
              type: string
            dispVariant:
              type: string
            exitCodes:
              type: string
            exitCodeProcessing:
              type: string
            exitCodeText:
              type: string
            exitCodeOutput:
              type: string
            immediate:
              type: boolean
            infoPackage:
              type: string
            infoPackageJobName:
              type: string
            infoSource:
              type: string
            jobLog:
              type: boolean
            jobStatus:
              type: string
            outputReturnType:
              type: string
            outputReturnFile:
              type: string
            outputReturnSline:
              type: string
            outputReturnNline:
              type: string
            outputReturnText:
              type: string
            outputType:
              type: string
            waitForOutput:
              type: boolean
            outputFailureOnly:
              type: boolean
            printAppLog:
              type: boolean
            printAppRc:
              type: boolean
            purge:
              type: boolean
            repositoryOrFilesys:
              type: string
            requestId:
              type: string
            runtimeDir:
              type: string
            sapLang:
              type: string
            chainId:
              type: string
            chainDesc:
              type: string
            sapCmProfileId:
              type: string
            sapCmProfileType:
              type: string
            sapCmXmlFile:
              type: string
            sapConnection:
              type: string
            sapConnectionVar:
              type: string
            sapCred:
              type: string
            sapCredVar:
              type: string
            sapDisplayCommand:
              type: string
            sapDispConfirmEvents:
              type: boolean
            sapDispEventSelectState:
              type: string
            sapEventId:
              type: string
            sapEventParm:
              type: string
            sapFromDate:
              type: string
            sapToDate:
              type: string
            logId:
              type: string
            sapPrinterName:
              type: string
            script:
              type: string
            sourceSystem:
              type: string
            spoollist:
              type: boolean
            start:
              type: boolean
            stepNum:
              type: string
            targetJobName:
              type: string
            targetServer:
              type: string
            targetVariantName:
              type: string
            useAppRc:
              type: boolean
            wait:
              type: boolean
            jobName:
              type: string
            jobId:
              type: string
            environment:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/NameValueWsData'
            sapView:
              type: string
            jobClass:
              type: string
            jobLogChild:
              type: string
            waitChild:
              type: boolean
            spoollistChild:
              type: boolean
            purgeChild:
              type: boolean
            maxChildDepth:
              type: integer
              format: int32
            emailNotification:
              $ref: '#/components/schemas/SapEmailNotificationWsData'
            spoolListRecipient:
              $ref: '#/components/schemas/SapSpoolListRecipientWsData'
            jobSteps:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/SapJobStepWsData'
            environmentFromString:
              type: string
              writeOnly: true
    TaskSleepWsData:
      required:
        - name
      type: object
      xml:
        name: taskSleep
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            sleepType:
              type: string
            sleepAmount:
              type: string
            sleepDuration:
              type: string
            sleepTime:
              type: string
            sleepDayConstraint:
              type: string
    TaskStoredProcParamWsData:
      type: object
      properties:
        sysId:
          type: string
        description:
          type: string
        paramMode:
          type: string
        paramType:
          type: string
        paramVar:
          type: string
        ivalue:
          type: string
        ovalue:
          type: string
        isNull:
          type: boolean
        variableScope:
          type: string
        pos:
          type: integer
          format: int32
      xml:
        name: storedProcParam
    TaskStoredProcWsData:
      required:
        - name
      type: object
      xml:
        name: taskStoredProc
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            storedProcName:
              type: string
            connectionVar:
              type: string
            maxRows:
              type: integer
              format: int32
            autoCleanup:
              type: boolean
            resultProcessing:
              type: string
            exitCodes:
              type: string
            columnName:
              type: string
            resultOp:
              type: string
            resultValue:
              type: string
            parameterPosition:
              type: integer
              format: int32
            storedProcParams:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskStoredProcParamWsData'
            connection:
              type: string
    TaskSystemMonitorWsData:
      required:
        - name
      type: object
      xml:
        name: taskSystemMonitor
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            smtype:
              type: string
            freeSize:
              type: number
              format: double
            byScale:
              type: string
            drive:
              type: string
            condition:
              type: string
    TaskToExclusiveWsData:
      type: object
      properties:
        sysId:
          type: string
        task:
          type: string
        type:
          type: string
    TaskToVirtualResourceWsData:
      type: object
      properties:
        sysId:
          type: string
        resource:
          type: string
        resourceVar:
          type: string
        amount:
          type: integer
          format: int32
      xml:
        name: task-to-virtual-resource
    TaskUcmdWsData:
      required:
        - name
      type: object
      xml:
        name: taskUcmd
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            commandOrScript:
              type: string
            command:
              type: string
            commandOptions:
              type: string
            broker:
              type: string
            brokerRef:
              type: string
            brokerChoice:
              type: string
            brokerCred:
              type: string
            brokerCredVar:
              type: string
            runtimeDir:
              type: string
            script:
              type: string
            scriptOptions:
              type: string
            exitCodes:
              type: string
            exitCodeProcessing:
              type: string
            exitCodeText:
              type: string
            exitCodeOutput:
              type: string
            outputType:
              type: string
            retryExitCodes:
              type: string
            outputReturnType:
              type: string
            outputReturnFile:
              type: string
            outputReturnSline:
              type: string
            outputReturnNline:
              type: string
            outputReturnText:
              type: string
            waitForOutput:
              type: boolean
            outputFailureOnly:
              type: boolean
    TaskUniversalMonitorWsData:
      required:
        - name
      type: object
      xml:
        name: taskUniversalMonitor
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            eventType:
              type: string
            eventTemplate:
              $ref: '#/components/schemas/LabelValueWsData'
            template:
              type: string
            templateEventTemplate:
              $ref: '#/components/schemas/LabelValueWsData'
            filter:
              $ref: '#/components/schemas/FilterWsData'
            timeScope:
              type: string
            relativeTimeFrom:
              type: string
            relativeTimeTo:
              type: string
            expirationAction:
              type: string
            taskUniversal:
              type: string
            taskUniversalVariables:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/OverrideVariableWsData'
            taskUniversalVariablesFromString:
              type: string
              writeOnly: true
            eventBusinessServiceCriteria:
              type: string
            eventBusinessServices:
              type: array
              xml:
                wrapped: true
              items:
                type: string
                xml:
                  name: businessService
    TaskUniversalWsData:
      required:
        - name
      type: object
      xml:
        name: taskUniversal
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            template:
              type: string
            intField1:
              $ref: '#/components/schemas/IntFieldWsData'
            intField2:
              $ref: '#/components/schemas/IntFieldWsData'
            intField3:
              $ref: '#/components/schemas/IntFieldWsData'
            intField4:
              $ref: '#/components/schemas/IntFieldWsData'
            intField5:
              $ref: '#/components/schemas/IntFieldWsData'
            intField6:
              $ref: '#/components/schemas/IntFieldWsData'
            intField7:
              $ref: '#/components/schemas/IntFieldWsData'
            intField8:
              $ref: '#/components/schemas/IntFieldWsData'
            intField9:
              $ref: '#/components/schemas/IntFieldWsData'
            intField10:
              $ref: '#/components/schemas/IntFieldWsData'
            booleanField1:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField2:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField3:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField4:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField5:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField6:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField7:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField8:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField9:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField10:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField11:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField12:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField13:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField14:
              $ref: '#/components/schemas/BooleanFieldWsData'
            booleanField15:
              $ref: '#/components/schemas/BooleanFieldWsData'
            textField1:
              $ref: '#/components/schemas/TextFieldWsData'
            textField2:
              $ref: '#/components/schemas/TextFieldWsData'
            textField3:
              $ref: '#/components/schemas/TextFieldWsData'
            textField4:
              $ref: '#/components/schemas/TextFieldWsData'
            textField5:
              $ref: '#/components/schemas/TextFieldWsData'
            textField6:
              $ref: '#/components/schemas/TextFieldWsData'
            textField7:
              $ref: '#/components/schemas/TextFieldWsData'
            textField8:
              $ref: '#/components/schemas/TextFieldWsData'
            textField9:
              $ref: '#/components/schemas/TextFieldWsData'
            textField10:
              $ref: '#/components/schemas/TextFieldWsData'
            textField11:
              $ref: '#/components/schemas/TextFieldWsData'
            textField12:
              $ref: '#/components/schemas/TextFieldWsData'
            textField13:
              $ref: '#/components/schemas/TextFieldWsData'
            textField14:
              $ref: '#/components/schemas/TextFieldWsData'
            textField15:
              $ref: '#/components/schemas/TextFieldWsData'
            textField16:
              $ref: '#/components/schemas/TextFieldWsData'
            textField17:
              $ref: '#/components/schemas/TextFieldWsData'
            textField18:
              $ref: '#/components/schemas/TextFieldWsData'
            textField19:
              $ref: '#/components/schemas/TextFieldWsData'
            textField20:
              $ref: '#/components/schemas/TextFieldWsData'
            largeTextField1:
              $ref: '#/components/schemas/TextFieldWsData'
            largeTextField2:
              $ref: '#/components/schemas/TextFieldWsData'
            largeTextField3:
              $ref: '#/components/schemas/TextFieldWsData'
            largeTextField4:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField1:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField2:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField3:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField4:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField5:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField6:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField7:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField8:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField9:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField10:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField11:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField12:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField13:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField14:
              $ref: '#/components/schemas/TextFieldWsData'
            choiceField15:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialField1:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialVarField1:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialField2:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialVarField2:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialField3:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialVarField3:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialField4:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialVarField4:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialField5:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialVarField5:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialField6:
              $ref: '#/components/schemas/TextFieldWsData'
            credentialVarField6:
              $ref: '#/components/schemas/TextFieldWsData'
            scriptField1:
              $ref: '#/components/schemas/TextFieldWsData'
            scriptVarField1:
              $ref: '#/components/schemas/TextFieldWsData'
            scriptField2:
              $ref: '#/components/schemas/TextFieldWsData'
            scriptVarField2:
              $ref: '#/components/schemas/TextFieldWsData'
            scriptField3:
              $ref: '#/components/schemas/TextFieldWsData'
            scriptVarField3:
              $ref: '#/components/schemas/TextFieldWsData'
            scriptField4:
              $ref: '#/components/schemas/TextFieldWsData'
            scriptVarField4:
              $ref: '#/components/schemas/TextFieldWsData'
            arrayField1:
              $ref: '#/components/schemas/ArrayFieldWsData'
            arrayField2:
              $ref: '#/components/schemas/ArrayFieldWsData'
            arrayField3:
              $ref: '#/components/schemas/ArrayFieldWsData'
            arrayField4:
              $ref: '#/components/schemas/ArrayFieldWsData'
            floatField1:
              $ref: '#/components/schemas/FloatFieldWsData'
            floatField2:
              $ref: '#/components/schemas/FloatFieldWsData'
            floatField3:
              $ref: '#/components/schemas/FloatFieldWsData'
            floatField4:
              $ref: '#/components/schemas/FloatFieldWsData'
            sapConnectionField1:
              $ref: '#/components/schemas/TextFieldWsData'
            sapConnectionVarField1:
              $ref: '#/components/schemas/TextFieldWsData'
            databaseConnectionField1:
              $ref: '#/components/schemas/TextFieldWsData'
            databaseConnectionVarField1:
              $ref: '#/components/schemas/TextFieldWsData'
            runtimeDir:
              type: string
            environment:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/NameValueWsData'
            exitCodeProcessing:
              type: string
            exitCodes:
              type: string
            exitCodeText:
              type: string
            exitCodeOutput:
              type: string
            outputType:
              type: string
            outputContentType:
              type: string
            outputPathExpression:
              type: string
            outputConditionOperator:
              type: string
            outputConditionValue:
              type: string
            outputConditionStrategy:
              type: string
            autoCleanup:
              type: boolean
            outputReturnType:
              type: string
            outputReturnFile:
              type: string
            outputReturnSline:
              type: string
            outputReturnNline:
              type: string
            outputReturnText:
              type: string
            waitForOutput:
              type: boolean
            outputFailureOnly:
              type: boolean
            elevateUser:
              type: boolean
            desktopInteract:
              type: boolean
            createConsole:
              type: boolean
            retryExitCodes:
              type: string
            environmentFromString:
              type: string
              writeOnly: true
    TaskUnixWsData:
      required:
        - name
      type: object
      xml:
        name: taskUnix
      allOf:
        - $ref: '#/components/schemas/TaskDistributedAgentWsData'
    TaskVariableMonitorWsData:
      required:
        - name
      type: object
      xml:
        name: taskVariableMonitor
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            variableName:
              type: string
            valueMonitorType:
              type: string
            valueCondition:
              type: string
            value:
              type: string
            timeLimit:
              type: string
            timeLimitUnit:
              type: string
            expirationAction:
              type: string
    TaskWebServiceWsData:
      required:
        - name
      type: object
      xml:
        name: taskWebService
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            protocol:
              type: string
            httpAuth:
              type: string
            httpVersion:
              type: string
            soapVersion:
              type: string
            timeout:
              type: integer
              format: int32
            httpMethod:
              type: string
            url:
              type: string
            urlParameters:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/NameValueWsData'
            httpPayloadType:
              type: string
            soapPayloadType:
              type: string
            mimeType:
              type: string
            payloadSource:
              type: string
            payload:
              type: string
            payloadScript:
              type: string
            formData:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/NameValueWsData'
            soapAction:
              type: string
            httpHeaders:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/NameValueWsData'
            soapResponseOutput:
              type: string
            responseProcessingType:
              type: string
            statusCodeRange:
              type: string
            outputType:
              type: string
            outputPathExpression:
              type: string
            outputConditionOperator:
              type: string
            outputConditionValue:
              type: string
            outputConditionStrategy:
              type: string
            autoCleanup:
              type: boolean
            insecure:
              type: boolean
            urlParametersFromString:
              type: string
              writeOnly: true
            httpHeadersFromString:
              type: string
              writeOnly: true
            formDataFromString:
              type: string
              writeOnly: true
    TaskWindowsWsData:
      required:
        - name
      type: object
      xml:
        name: taskWindows
      allOf:
        - $ref: '#/components/schemas/TaskDistributedAgentWsData'
        - type: object
          properties:
            elevateUser:
              type: boolean
            desktopInteract:
              type: boolean
            createConsole:
              type: boolean
    TaskWorkflowEdgePointWsData:
      type: object
      properties:
        x:
          type: string
          xml:
            attribute: true
        'y':
          type: string
          xml:
            attribute: true
    TaskWorkflowEdgeWsData:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/ConditionWsData'
        straightEdge:
          type: boolean
        points:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TaskWorkflowEdgePointWsData'
        sourceId:
          $ref: '#/components/schemas/EdgeVertexWsData'
        targetId:
          $ref: '#/components/schemas/EdgeVertexWsData'
      xml:
        name: workflowEdge
    TaskWorkflowVertexWsData:
      type: object
      properties:
        task:
          $ref: '#/components/schemas/Task'
        alias:
          type: string
        vertexId:
          type: string
        vertexX:
          type: string
        vertexY:
          type: string
        conditionExpression:
          $ref: '#/components/schemas/ConditionExpressionWsData'
      xml:
        name: workflowVertex
    TaskWorkflowWsData:
      required:
        - name
      type: object
      xml:
        name: taskWorkflow
      allOf:
        - $ref: '#/components/schemas/TaskWsData'
        - type: object
          properties:
            skippedOption:
              type: string
            layoutOption:
              type: string
            calendar:
              type: string
            calculateCp:
              type: boolean
            overrideCalendar:
              type: boolean
            numberOfTasks:
              type: integer
              format: int32
            instanceWait:
              type: string
            stepConditions:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskZosStepConditionWsData'
            stepActions:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskZosStepActionSysopWsData'
            runCriteria:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskRunCriteriaWsData'
            criticalEndpoints:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskCriticalEndpointWsData'
            workflowVertices:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskWorkflowVertexWsData'
            workflowEdges:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskWorkflowEdgeWsData'
    TaskWsData:
      required:
        - name
        - type
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        variables:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/VariableWsData'
        notes:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NoteWsData'
        actions:
          $ref: '#/components/schemas/ActionWsData'
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        name:
          type: string
        resolveNameImmediately:
          type: boolean
        summary:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        startHeld:
          type: boolean
        startHeldReason:
          type: string
        resPriority:
          type: integer
          format: int32
        holdResources:
          type: boolean
        credentials:
          type: string
        credentialsVar:
          type: string
        credentialsVarCheck:
          type: string
        retryMaximum:
          type: integer
          format: int32
        retryIndefinitely:
          type: boolean
        retryInterval:
          type: integer
          format: int32
        retrySuppressFailure:
          type: boolean
        lsEnabled:
          type: boolean
        lsType:
          type: string
        lsTime:
          type: string
        lsDayConstraint:
          type: string
        lsNthAmount:
          type: integer
          format: int32
        lsDuration:
          type: string
        lfEnabled:
          type: boolean
        lfType:
          type: string
        lfTime:
          type: string
        lfDayConstraint:
          type: string
        lfNthAmount:
          type: integer
          format: int32
        lfDuration:
          type: string
        lfOffsetType:
          type: string
        lfOffsetPercentage:
          type: integer
          format: int32
        lfOffsetDuration:
          type: string
        lfOffsetDurationUnit:
          type: string
        efEnabled:
          type: boolean
        efType:
          type: string
        efTime:
          type: string
        efDayConstraint:
          type: string
        efNthAmount:
          type: integer
          format: int32
        efDuration:
          type: string
        efOffsetType:
          type: string
        efOffsetPercentage:
          type: integer
          format: int32
        efOffsetDuration:
          type: string
        efOffsetDurationUnit:
          type: string
        userEstimatedDuration:
          type: string
        cpDuration:
          type: string
        cpDurationUnit:
          type: string
        twWaitType:
          type: string
        twWaitAmount:
          type: string
        twWaitTime:
          type: string
        twWaitDuration:
          type: string
        twWaitDayConstraint:
          type: string
        twDelayType:
          type: string
        twDelayAmount:
          type: string
        twDelayDuration:
          type: string
        twWorkflowOnly:
          type: string
        customField1:
          $ref: '#/components/schemas/CustomFieldWsData'
        customField2:
          $ref: '#/components/schemas/CustomFieldWsData'
        executionRestriction:
          type: string
        restrictionPeriod:
          type: string
        restrictionPeriodBeforeDate:
          type: string
        restrictionPeriodAfterDate:
          type: string
        restrictionPeriodBeforeTime:
          type: string
        restrictionPeriodAfterTime:
          type: string
        restrictionPeriodDateList:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: date
        logLevel:
          type: string
        exclusiveWithSelf:
          type: boolean
        minRunTime:
          type: integer
          format: int64
        maxRunTime:
          type: integer
          format: int64
        avgRunTime:
          type: integer
          format: int64
        lastRunTime:
          type: integer
          format: int64
        minRunTimeDisplay:
          type: string
        maxRunTimeDisplay:
          type: string
        avgRunTimeDisplay:
          type: string
        lastRunTimeDisplay:
          type: string
        runCount:
          type: integer
          format: int64
        runTime:
          type: integer
          format: int64
        firstRun:
          type: string
        lastRun:
          type: string
        simulation:
          type: boolean
        enforceVariables:
          type: boolean
        lockVariables:
          type: boolean
        overrideInstanceWait:
          type: string
        timeZonePref:
          type: string
        virtualResources:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TaskToVirtualResourceWsData'
        exclusiveTasks:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TaskToExclusiveWsData'
        type:
          type: string
      xml:
        name: task
      discriminator:
        propertyName: type
    TaskZosMonitorWsData:
      required:
        - name
      type: object
      xml:
        name: taskZosMonitor
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            jobName:
              type: string
            userId:
              type: string
            jobEvent:
              type: string
            conditionCode:
              type: string
            stepName:
              type: string
            timeScope:
              type: string
            relativeTimeFrom:
              type: string
            relativeTimeTo:
              type: string
            expirationAction:
              type: string
    TaskZosRestartCriteriaWsData:
      type: object
      properties:
        sysId:
          type: string
        stepName:
          type: string
        pstepName:
          type: string
        programName:
          type: string
        stepCodes:
          type: string
        restartOption:
          type: string
        evaluationOrder:
          type: integer
          format: int32
        directives:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Directive'
        directivesFromString:
          type: string
          writeOnly: true
      xml:
        name: restartCriterion
    TaskZosStepActionSysopWsData:
      type: object
      properties:
        actionCriteriaTask:
          type: string
        sysId:
          type: string
        vertexId:
          type: string
        description:
          type: string
        stepName:
          type: string
        pstepName:
          type: string
        programName:
          type: string
        stepCodes:
          type: string
        execId:
          type: string
        notificationOption:
          type: string
        variablesFromString:
          type: string
          writeOnly: true
        vertices:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/VertexWsData'
        execLookupOption:
          type: string
        overrideTriggerDateTime:
          type: boolean
        operation:
          type: string
        taskLimitType:
          type: string
        virtualResource:
          type: string
        execCommand:
          type: string
        execName:
          type: string
        variablesUnresolved:
          type: boolean
        execCriteria:
          type: string
        execWorkflowNameCond:
          type: string
        execWorkflowName:
          type: string
        overrideTriggerTime:
          type: string
        vertexSelection:
          type: boolean
        taskVar:
          type: string
        triggerVar:
          type: string
        overrideTriggerDateOffset:
          type: string
        virtualResourceVar:
          type: string
        agentVar:
          type: string
        agentClusterVar:
          type: string
        limit:
          type: string
        task:
          type: string
        agentCluster:
          type: string
        trigger:
          type: string
        agent:
          type: string
        variables:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NameValueWsData'
      xml:
        name: systemOperation
    TaskZosStepConditionWsData:
      type: object
      properties:
        sysId:
          type: string
        stepName:
          type: string
        pstepName:
          type: string
        programName:
          type: string
        stepCodes:
          type: string
        stepAction:
          type: string
        stepOrder:
          type: integer
          format: int32
        workflowId:
          type: string
      xml:
        name: stepCondition
    TaskZosWsData:
      required:
        - name
      type: object
      xml:
        name: taskZos
      allOf:
        - $ref: '#/components/schemas/TaskAgentWsData'
        - type: object
          properties:
            jobnameNew:
              type: string
            jobclassNew:
              type: string
            msgclassNew:
              type: string
            systemOrSysaffParameter:
              type: string
            jclLocation:
              type: string
            useOverrideLib:
              type: boolean
            overrideJclLocation:
              type: string
            deleteOverrideJcl:
              type: boolean
            overrideJclDelInstCount:
              type: string
            parameters:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/NameValueWsData'
            exitCodeProcessing:
              type: string
            exitCodes:
              type: string
            exitCodeText:
              type: string
            exitCodeOutput:
              type: string
            outputType:
              type: string
            scheduleId:
              type: string
            proclibName:
              type: string
            outputReturnType:
              type: string
            outputReturnFile:
              type: string
            outputReturnSline:
              type: string
            outputReturnNline:
              type: string
            outputReturnText:
              type: string
            waitForOutput:
              type: boolean
            outputFailureOnly:
              type: boolean
            autoRestartOption:
              type: string
            restartCriteria:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskZosRestartCriteriaWsData'
            stepConditions:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/TaskZosStepConditionWsData'
            parametersFromString:
              type: string
              writeOnly: true
    TextFieldWsData:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        label:
          type: string
          xml:
            attribute: true
        value:
          type: string
      xml:
        name: textField
    TimeListWsData:
      type: object
      properties:
        time:
          type: string
        dayConstraint:
          type: string
    VariableActionWsData:
      type: object
      properties:
        status:
          type: string
        notifyOnLateStart:
          type: boolean
        notifyOnLateFinish:
          type: boolean
        notifyOnEarlyFinish:
          type: boolean
        notifyOnProjectedLate:
          type: boolean
        exitCodes:
          type: string
        description:
          type: string
        inheritance:
          type: string
        sysId:
          type: string
        variableScope:
          type: string
        variableName:
          type: string
        variableDescription:
          type: string
        variableValue:
          type: string
        notificationOption:
          type: string
      xml:
        name: set-variable-action
    VariableConditionWsData:
      type: object
      xml:
        name: variableCondition
      allOf:
        - $ref: '#/components/schemas/ConditionWsData'
        - type: object
          properties:
            firstValue:
              type: string
            operator:
              type: string
            secondValue:
              type: string
    VariableWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        value:
          type: string
        type:
          type: string
        description:
          type: string
        taskId:
          type: string
        taskName:
          type: string
        triggerId:
          type: string
        triggerName:
          type: string
        options:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: option
        allowEmptyOption:
          type: boolean
        allowUnlistedOption:
          type: boolean
      xml:
        name: variable
    VertexWsData:
      type: object
      properties:
        taskName:
          type: string
        vertexName:
          type: string
        vertexId:
          type: string
        root:
          type: boolean
          xml:
            attribute: true
      xml:
        name: vertex
    GenericQueryFilterWsData:
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
        type:
          type: string
        businessServices:
          type: string
        updatedTimeType:
          type: string
        updatedTime:
          type: string
        workflowId:
          type: string
        workflowName:
          type: string
        agentName:
          type: string
        description:
          type: string
        tasks:
          type: string
        templateId:
          type: string
        templateName:
          type: string
      xml:
        name: generic-query-filter
    CommandResponseWithSysIdWsData:
      type: object
      properties:
        type:
          type: string
        success:
          type: boolean
        info:
          type: string
        errors:
          type: string
        sysId:
          type: string
      xml:
        name: command-response
    TaskLaunchWsData:
      type: object
      properties:
        name:
          type: string
        hold:
          type: string
        holdReason:
          type: string
        timeZone:
          type: string
        virtualResourcePriority:
          type: integer
          format: int32
        virtualResources:
          type: array
          xml:
            name: virtual-resources
            wrapped: true
          items:
            $ref: '#/components/schemas/VirtualResourceInfoWsData'
        launchReason:
          type: string
        simulate:
          type: boolean
        variables:
          type: array
          xml:
            name: variable
          items:
            $ref: '#/components/schemas/VariableWsData'
        variablesMap:
          type: object
          additionalProperties:
            type: string
      xml:
        name: task-launch
    VariableListWsData:
      type: object
      properties:
        variables:
          type: array
          xml:
            name: variable
          items:
            $ref: '#/components/schemas/VariableWsData'
        variablesMap:
          type: object
          additionalProperties:
            type: string
      xml:
        name: variables
    VirtualResourceInfoWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
          xml:
            name: sysID
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        limit:
          type: integer
          format: int32
        type:
          type: string
        used:
          type: integer
          format: int32
        usedByTasks:
          type: array
          xml:
            name: used-by-tasks
            wrapped: true
          items:
            $ref: '#/components/schemas/VirtualResourceToTaskWsData'
      xml:
        name: virtual-resource
    VirtualResourceToTaskWsData:
      type: object
      properties:
        taskInstanceName:
          type: string
        amount:
          type: integer
          format: int32
      xml:
        name: virtual-resource-to-task
    ExecutionUserWsData:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        token:
          type: string
      xml:
        name: executionUser
    TriggerAbstractWsData:
      required:
        - type
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        name:
          type: string
        description:
          type: string
        calendar:
          type: string
        enabled:
          type: boolean
        forecast:
          type: boolean
        restriction:
          type: boolean
        restrictionSimple:
          type: boolean
        restrictionComplex:
          type: boolean
        situation:
          type: string
        action:
          type: string
        restrictionMode:
          type: string
        restrictionAdjective:
          type: string
        restrictionNthAmount:
          type: integer
          format: int32
        restrictionNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionNouns:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionQualifiers:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/ComplexDayWrapperWsData'
        skipCount:
          type: integer
          format: int32
        skipActive:
          type: boolean
        simulationOption:
          type: string
        timeZone:
          type: string
        executionUser:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        tasks:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: task
        simulateTasks:
          type: boolean
        retentionDurationPurge:
          type: boolean
        retentionDuration:
          type: integer
          format: int32
        retentionDurationUnit:
          type: string
        rdExcludeBackup:
          type: boolean
        skipCondition:
          type: string
        skipRestriction:
          type: string
        skipAfterDate:
          type: string
        skipAfterTime:
          type: string
        skipBeforeDate:
          type: string
        skipBeforeTime:
          type: string
        skipDateList:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: date
        enabledBy:
          type: string
        enabledTime:
          type: string
        disabledBy:
          type: string
        disabledTime:
          type: string
        nextScheduledTime:
          type: string
        enforceVariables:
          type: boolean
        lockVariables:
          type: boolean
        customField1:
          $ref: '#/components/schemas/CustomFieldWsData'
        customField2:
          $ref: '#/components/schemas/CustomFieldWsData'
        variables:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/VariableWsData'
        notes:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NoteWsData'
        restrictionNounsFromString:
          type: string
          writeOnly: true
        restrictionQualifiersFromString:
          type: string
          writeOnly: true
        type:
          type: string
      xml:
        name: trigger
      discriminator:
        propertyName: type
    TriggerApplMonitorWsData:
      type: object
      xml:
        name: triggerApplMonitor
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            status:
              type: string
            monitorType:
              type: string
            application:
              type: string
            applNameCondition:
              type: string
            applNameValue:
              type: string
            applType:
              type: string
    TriggerComponentEmWsData:
      type: object
      properties:
        sysId:
          type: string
        name:
          type: string
        description:
          type: string
        variablePrefix:
          type: string
        restrictedTimes:
          type: boolean
        enabledStart:
          type: string
        enabledEnd:
          type: string
        restriction:
          type: boolean
        restrictionSimple:
          type: boolean
        restrictionComplex:
          type: boolean
        restrictionMode:
          type: string
        restrictionAdjective:
          type: string
        restrictionNthAmount:
          type: integer
          format: int32
        restrictionNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        situation:
          type: string
        action:
          type: string
        emailMonitor:
          type: string
      xml:
        name: emailMonitorComponent
    TriggerComponentFmWsData:
      type: object
      properties:
        sysId:
          type: string
        name:
          type: string
        description:
          type: string
        variablePrefix:
          type: string
        restrictedTimes:
          type: boolean
        enabledStart:
          type: string
        enabledEnd:
          type: string
        restriction:
          type: boolean
        restrictionSimple:
          type: boolean
        restrictionComplex:
          type: boolean
        restrictionMode:
          type: string
        restrictionAdjective:
          type: string
        restrictionNthAmount:
          type: integer
          format: int32
        restrictionNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        situation:
          type: string
        action:
          type: string
        fileMonitor:
          type: string
      xml:
        name: fileMonitorComponent
    TriggerComponentTimeWsData:
      type: object
      properties:
        sysId:
          type: string
        name:
          type: string
        description:
          type: string
        variablePrefix:
          type: string
        restrictedTimes:
          type: boolean
        enabledStart:
          type: string
        enabledEnd:
          type: string
        restriction:
          type: boolean
        restrictionSimple:
          type: boolean
        restrictionComplex:
          type: boolean
        restrictionMode:
          type: string
        restrictionAdjective:
          type: string
        restrictionNthAmount:
          type: integer
          format: int32
        restrictionNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        situation:
          type: string
        action:
          type: string
        time:
          type: string
        timeInterval:
          type: integer
          format: int32
        timeIntervalUnits:
          type: string
        timeStyle:
          type: string
        startingAt:
          type: string
        adjustInterval:
          type: boolean
        startTimeEnable:
          type: boolean
        dayStyle:
          type: string
        dayInterval:
          type: integer
          format: int32
        intervalStartingDate:
          type: string
        dateAdjective:
          type: string
        dateNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        dateQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        dateAdjustment:
          type: string
        adjustmentAmount:
          type: integer
          format: int32
        adjustmentType:
          type: string
        simpleDateType:
          type: string
        sun:
          type: boolean
        mon:
          type: boolean
        tue:
          type: boolean
        wed:
          type: boolean
        thu:
          type: boolean
        fri:
          type: boolean
        sat:
          type: boolean
        nthAmount:
          type: integer
          format: int32
        eventMatchType:
          type: string
      xml:
        name: timeComponent
    TriggerComponentTmWsData:
      type: object
      properties:
        sysId:
          type: string
        name:
          type: string
        description:
          type: string
        variablePrefix:
          type: string
        restrictedTimes:
          type: boolean
        enabledStart:
          type: string
        enabledEnd:
          type: string
        restriction:
          type: boolean
        restrictionSimple:
          type: boolean
        restrictionComplex:
          type: boolean
        restrictionMode:
          type: string
        restrictionAdjective:
          type: string
        restrictionNthAmount:
          type: integer
          format: int32
        restrictionNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        situation:
          type: string
        action:
          type: string
        taskMonitor:
          type: string
      xml:
        name: taskMonitorComponent
    TriggerComponentUmWsData:
      type: object
      properties:
        sysId:
          type: string
        name:
          type: string
        description:
          type: string
        variablePrefix:
          type: string
        restrictedTimes:
          type: boolean
        enabledStart:
          type: string
        enabledEnd:
          type: string
        restriction:
          type: boolean
        restrictionSimple:
          type: boolean
        restrictionComplex:
          type: boolean
        restrictionMode:
          type: string
        restrictionAdjective:
          type: string
        restrictionNthAmount:
          type: integer
          format: int32
        restrictionNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        situation:
          type: string
        action:
          type: string
        universalMonitor:
          type: string
      xml:
        name: universalMonitorComponent
    TriggerComponentVmWsData:
      type: object
      properties:
        sysId:
          type: string
        name:
          type: string
        description:
          type: string
        variablePrefix:
          type: string
        restrictedTimes:
          type: boolean
        enabledStart:
          type: string
        enabledEnd:
          type: string
        restriction:
          type: boolean
        restrictionSimple:
          type: boolean
        restrictionComplex:
          type: boolean
        restrictionMode:
          type: string
        restrictionAdjective:
          type: string
        restrictionNthAmount:
          type: integer
          format: int32
        restrictionNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        situation:
          type: string
        action:
          type: string
        variableMonitor:
          type: string
      xml:
        name: variableMonitorComponent
    TriggerComponentZmWsData:
      type: object
      properties:
        sysId:
          type: string
        name:
          type: string
        description:
          type: string
        variablePrefix:
          type: string
        restrictedTimes:
          type: boolean
        enabledStart:
          type: string
        enabledEnd:
          type: string
        restriction:
          type: boolean
        restrictionSimple:
          type: boolean
        restrictionComplex:
          type: boolean
        restrictionMode:
          type: string
        restrictionAdjective:
          type: string
        restrictionNthAmount:
          type: integer
          format: int32
        restrictionNoun:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        restrictionQualifier:
          $ref: '#/components/schemas/ComplexDayWrapperWsData'
        situation:
          type: string
        action:
          type: string
        zosMonitor:
          type: string
      xml:
        name: zosMonitorComponent
    TriggerComponentsWsData:
      type: object
      properties:
        emailMonitorComponents:
          type: array
          items:
            $ref: '#/components/schemas/TriggerComponentEmWsData'
        fileMonitorComponents:
          type: array
          items:
            $ref: '#/components/schemas/TriggerComponentFmWsData'
        taskMonitorComponents:
          type: array
          items:
            $ref: '#/components/schemas/TriggerComponentTmWsData'
        variableMonitorComponents:
          type: array
          items:
            $ref: '#/components/schemas/TriggerComponentVmWsData'
        zosMonitorComponents:
          type: array
          items:
            $ref: '#/components/schemas/TriggerComponentZmWsData'
        universalMonitorComponents:
          type: array
          items:
            $ref: '#/components/schemas/TriggerComponentUmWsData'
        timeComponents:
          type: array
          items:
            $ref: '#/components/schemas/TriggerComponentTimeWsData'
    TriggerCompositeWsData:
      type: object
      xml:
        name: triggerComposite
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            timeLimit:
              type: integer
              format: int32
            timeLimitUnits:
              type: string
            queueDepth:
              type: integer
              format: int32
            restrictedTimes:
              type: boolean
            enabledStart:
              type: string
            enabledEnd:
              type: string
            components:
              $ref: '#/components/schemas/TriggerComponentsWsData'
    TriggerCronWsData:
      type: object
      xml:
        name: triggerCron
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            minutes:
              type: string
            hours:
              type: string
            dayOfMonth:
              type: string
            month:
              type: string
            dayOfWeek:
              type: string
            dayLogic:
              type: string
    TriggerEmWsData:
      type: object
      xml:
        name: triggerEm
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            taskMonitor:
              type: string
            restrictedTimes:
              type: boolean
            enabledStart:
              type: string
            enabledEnd:
              type: string
    TriggerFmWsData:
      type: object
      xml:
        name: triggerFm
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            taskMonitor:
              type: string
            restrictedTimes:
              type: boolean
            enabledStart:
              type: string
            enabledEnd:
              type: string
    TriggerManualWsData:
      type: object
      xml:
        name: triggerManual
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            skipAfterDate:
              type: string
              writeOnly: true
            skipBeforeDate:
              type: string
              writeOnly: true
            skipDateList:
              type: array
              writeOnly: true
              items:
                type: string
    TriggerTempWsData:
      type: object
      xml:
        name: triggerTemp
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            skipAfterDate:
              type: string
              writeOnly: true
            skipBeforeDate:
              type: string
              writeOnly: true
            skipDateList:
              type: array
              writeOnly: true
              items:
                type: string
            tdate:
              type: string
            ttime:
              type: string
            keepTrigger:
              type: boolean
    TriggerTimeWsData:
      type: object
      xml:
        name: triggerTime
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            time:
              type: string
            timeInterval:
              type: integer
              format: int32
            timeIntervalUnits:
              type: string
            timeStyle:
              type: string
            startingAt:
              type: string
            startTimeEnable:
              type: boolean
            dayStyle:
              type: string
            dayInterval:
              type: integer
              format: int32
            intervalStartingDate:
              type: string
            dateAdjective:
              type: string
            dateNoun:
              $ref: '#/components/schemas/ComplexDayWrapperWsData'
            dateNouns:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/ComplexDayWrapperWsData'
            dateQualifier:
              $ref: '#/components/schemas/ComplexDayWrapperWsData'
            dateQualifiers:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/ComplexDayWrapperWsData'
            dateAdjustment:
              type: string
            adjustmentAmount:
              type: integer
              format: int32
            adjustmentType:
              type: string
            simpleDateType:
              type: string
            businessDays:
              type: boolean
            custom:
              type: boolean
            daily:
              type: boolean
            sun:
              type: boolean
            mon:
              type: boolean
            tue:
              type: boolean
            wed:
              type: boolean
            thu:
              type: boolean
            fri:
              type: boolean
            sat:
              type: boolean
            adjustInterval:
              type: boolean
            restrictedTimes:
              type: boolean
            enabledStart:
              type: string
            enabledEnd:
              type: string
            nthAmount:
              type: integer
              format: int32
            dateNounsFromString:
              type: string
              writeOnly: true
            dateQualifiersFromString:
              type: string
              writeOnly: true
    TriggerTmWsData:
      type: object
      xml:
        name: triggerTm
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            taskMonitor:
              type: string
            restrictedTimes:
              type: boolean
            enabledStart:
              type: string
            enabledEnd:
              type: string
    TriggerUmWsData:
      type: object
      xml:
        name: triggerUm
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            taskMonitor:
              type: string
            restrictedTimes:
              type: boolean
            enabledStart:
              type: string
            enabledEnd:
              type: string
    TriggerVmWsData:
      type: object
      xml:
        name: triggerVm
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            taskMonitor:
              type: string
            restrictedTimes:
              type: boolean
            enabledStart:
              type: string
            enabledEnd:
              type: string
    TriggerZmWsData:
      type: object
      xml:
        name: triggerZm
      allOf:
        - $ref: '#/components/schemas/TriggerAbstractWsData'
        - type: object
          properties:
            taskMonitor:
              type: string
            restrictedTimes:
              type: boolean
            enabledStart:
              type: string
            enabledEnd:
              type: string
    EnableDisableTriggerWsData:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        enable:
          type: boolean
          xml:
            attribute: true
      xml:
        name: trigger
    EnableDisableTriggerListWsData:
      type: object
      properties:
        triggers:
          type: array
          xml:
            name: trigger
          items:
            $ref: '#/components/schemas/EnableDisableTriggerWsData'
      xml:
        name: enable-disable-trigger
    TriggerComponentEventsWsData:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        timeLimit:
          type: integer
          format: int32
        timeLimitUnits:
          type: string
        queueDepth:
          type: integer
          format: int32
        components:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TriggerListComponentWsData'
      xml:
        name: triggerComponentEvents
    TriggerListComponentWsData:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
        eventCount:
          type: integer
          format: int32
        events:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TriggerListEventWsData'
    TriggerListEventWsData:
      type: object
      properties:
        created:
          type: string
        position:
          type: integer
          format: int32
        variables:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NameValueWsData'
    TriggerWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
          xml:
            name: sysID
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        type:
          type: string
        enabled:
          type: boolean
      xml:
        name: trigger
    QualifyingTimeListWsData:
      type: object
      properties:
        triggerTimeZone:
          type: string
          xml:
            attribute: true
        userTimeZone:
          type: string
          xml:
            attribute: true
        qualifyingTimes:
          type: array
          xml:
            name: qualifyingTime
          items:
            $ref: '#/components/schemas/QualifyingTimeWsData'
      xml:
        name: qualifyingTimes
    QualifyingTimeWsData:
      type: object
      properties:
        userTimeZone:
          type: string
        triggerTimeZone:
          type: string
        skip:
          type: boolean
          xml:
            attribute: true
      xml:
        name: qualifyingTime
    SetTriggerTimeWsData:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        time:
          type: string
      xml:
        name: trigger
    TriggerNowWsData:
      type: object
      properties:
        name:
          type: string
        variables:
          type: array
          xml:
            name: variable
          items:
            $ref: '#/components/schemas/VariableWsData'
        variablesMap:
          type: object
          additionalProperties:
            type: string
        hold:
          type: string
        holdReason:
          type: string
        timeZone:
          type: string
        virtualResourcePriority:
          type: integer
          format: int32
        virtualResources:
          type: array
          xml:
            name: virtual-resources
            wrapped: true
          items:
            $ref: '#/components/schemas/VirtualResourceInfoWsData'
        overrideTriggerDateTime:
          type: boolean
        overrideDate:
          type: string
        overrideTime:
          type: string
        overrideTimeZone:
          type: string
        launchReason:
          type: string
        simulate:
          type: boolean
      xml:
        name: trigger-now
    AttributeWsData:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        values:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: value
    UniversalEventWsData:
      type: object
      properties:
        name:
          type: string
        businessServices:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: businessService
        ttl:
          type: integer
          format: int32
        attributes:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AttributeWsData'
      xml:
        name: universalEvent
    EventTemplateAttributeWsData:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        type:
          type: string
    UniversalEventTemplateWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        label:
          type: string
        description:
          type: string
        ttl:
          type: integer
          format: int32
        attributesPolicy:
          type: string
        attributes:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/EventTemplateAttributeWsData'
        metricType:
          type: string
        metricName:
          type: string
        metricValueAttribute:
          type: string
        metricUnit:
          type: string
        metricLabelAttributes:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: metricLabelAttribute
        metricOptionalLabels:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: metricOptionalLabel
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        attributesFromString:
          type: string
          writeOnly: true
      xml:
        name: eventTemplate
    UniversalTemplateCommandWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        label:
          type: string
        statuses:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: status
        fields:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: field
        timeout:
          type: integer
          format: int32
        executionOption:
          type: string
        asynchronous:
          type: boolean
      xml:
        name: command
    UniversalTemplateEventTemplateWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        label:
          type: string
        description:
          type: string
        ttl:
          type: integer
          format: int32
        attributesPolicy:
          type: string
        attributes:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/EventTemplateAttributeWsData'
        metricType:
          type: string
        metricName:
          type: string
        metricValueAttribute:
          type: string
        metricUnit:
          type: string
        metricLabelAttributes:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: metricLabelAttribute
        metricOptionalLabels:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: metricOptionalLabel
        attributesFromString:
          type: string
          writeOnly: true
      xml:
        name: eventTemplate
    UniversalTemplateFieldChoiceWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        fieldValue:
          type: string
        fieldValueLabel:
          type: string
        useFieldValueForLabel:
          type: boolean
        sequence:
          type: integer
          format: int32
      xml:
        name: choice
    UniversalTemplateFieldWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        label:
          type: string
        hint:
          type: string
        defaultListView:
          type: boolean
        fieldType:
          type: string
        fieldMapping:
          type: string
        textType:
          type: string
        fieldValue:
          type: string
        allowVariable:
          type: boolean
        fieldRestriction:
          type: string
        preserveOutputOnRerun:
          type: boolean
        extensionStatus:
          type: boolean
        booleanValueType:
          type: string
        booleanYesValue:
          type: string
        booleanNoValue:
          type: string
        choiceSortOption:
          type: string
        choiceAllowEmpty:
          type: boolean
        choiceAllowMultiple:
          type: boolean
        choiceDynamic:
          type: boolean
        choiceFields:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: choiceField
        required:
          type: boolean
        requireIfField:
          type: string
        requireIfFieldValue:
          type: string
        showIfField:
          type: string
        showIfFieldValue:
          type: string
        requireIfVisible:
          type: boolean
        preserveValueIfHidden:
          type: boolean
        noSpaceIfHidden:
          type: boolean
        fieldLength:
          type: integer
          format: int32
        intFieldMin:
          type: integer
          format: int32
        intFieldMax:
          type: integer
          format: int32
        fieldRegex:
          type: string
        formColumnSpan:
          type: integer
          format: int32
        formStartRow:
          type: boolean
        formEndRow:
          type: boolean
        sequence:
          type: integer
          format: int32
        arrayNameTitle:
          type: string
        arrayValueTitle:
          type: string
        arrayFieldValue:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NameValueWsData'
        choices:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UniversalTemplateFieldChoiceWsData'
      xml:
        name: field
    UniversalTemplateWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        description:
          type: string
        extension:
          type: string
        variablePrefix:
          type: string
        logLevel:
          type: string
        iconFilename:
          type: string
        iconFilesize:
          type: integer
          format: int32
        iconDateCreated:
          type: string
        templateType:
          type: string
        agentType:
          type: string
        useCommonScript:
          type: boolean
        script:
          type: string
        scriptUnix:
          type: string
        scriptWindows:
          type: string
        scriptTypeWindows:
          type: string
        alwaysCancelOnFinish:
          type: boolean
        sendVariables:
          type: string
        credentials:
          type: string
        credentialsVar:
          type: string
        credentialsVarCheck:
          type: string
        agent:
          type: string
        agentVar:
          type: string
        agentVarCheck:
          type: string
        agentCluster:
          type: string
        agentClusterVar:
          type: string
        agentClusterVarCheck:
          type: string
        broadcastCluster:
          type: string
        broadcastClusterVar:
          type: string
        broadcastClusterVarCheck:
          type: string
        runtimeDir:
          type: string
        environment:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NameValueWsData'
        sendEnvironment:
          type: string
        exitCodes:
          type: string
        exitCodeProcessing:
          type: string
        exitCodeText:
          type: string
        exitCodeOutput:
          type: string
        outputType:
          type: string
        outputContentType:
          type: string
        outputPathExpression:
          type: string
        outputConditionOperator:
          type: string
        outputConditionValue:
          type: string
        outputConditionStrategy:
          type: string
        autoCleanup:
          type: boolean
        outputReturnType:
          type: string
        outputReturnFile:
          type: string
        outputReturnSline:
          type: string
        outputReturnNline:
          type: string
        outputReturnText:
          type: string
        waitForOutput:
          type: boolean
        outputFailureOnly:
          type: boolean
        elevateUser:
          type: boolean
        desktopInteract:
          type: boolean
        createConsole:
          type: boolean
        agentFieldsRestriction:
          type: string
        credentialFieldsRestriction:
          type: string
        environmentVariablesFieldsRestriction:
          type: string
        exitCodeProcessingFieldsRestriction:
          type: string
        automaticOutputRetrievalFieldsRestriction:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        minReleaseLevel:
          type: string
          xml:
            attribute: true
        environmentFromString:
          type: string
          writeOnly: true
        fields:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UniversalTemplateFieldWsData'
        commands:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UniversalTemplateCommandWsData'
        events:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UniversalTemplateEventTemplateWsData'
      xml:
        name: universalTemplate
    GroupHasRoleWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        role:
          $ref: '#/components/schemas/RoleWsData'
      xml:
        name: groupRole
    PermissionWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        permissionType:
          type: string
        opCreate:
          type: boolean
        opRead:
          type: boolean
        opUpdate:
          type: boolean
        opDelete:
          type: boolean
        opExecute:
          type: boolean
        nameWildcard:
          type: string
        commands:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        allGroups:
          type: boolean
        defaultGroup:
          type: boolean
        notGroups:
          type: boolean
      xml:
        name: permission
    RoleWsData:
      type: object
      properties:
        description:
          type: string
          xml:
            attribute: true
        value:
          type: string
      xml:
        name: role
    User:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        value:
          type: string
      xml:
        name: user
    UserGrmemberWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        user:
          $ref: '#/components/schemas/User'
      xml:
        name: groupMember
    UserGroupWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        name:
          type: string
        email:
          type: string
        manager:
          $ref: '#/components/schemas/User'
        description:
          type: string
        parent:
          type: string
        ctrlNavigationVisibility:
          type: boolean
        navigationVisibility:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: navigationNode
        permissions:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/PermissionWsData'
        groupRoles:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/GroupHasRoleWsData'
        groupMembers:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UserGrmemberWsData'
      xml:
        name: userGroup
    ChangeUserPasswordWsData:
      type: object
      properties:
        userId:
          type: string
        newPassword:
          type: string
      xml:
        name: change-user-password
    AuthTokenWsData:
      type: object
      properties:
        name:
          type: string
        expiration:
          type: string
        lastUsed:
          type: string
        createTime:
          type: string
        userId:
          type: string
        userName:
          type: string
      xml:
        name: token
    UserHasRoleWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        role:
          $ref: '#/components/schemas/RoleWsData'
      xml:
        name: userRole
    UserWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        userName:
          type: string
        userPassword:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        email:
          type: string
        title:
          type: string
        active:
          type: boolean
        lockedOut:
          type: boolean
        passwordNeedsReset:
          type: boolean
        businessPhone:
          type: string
        mobilePhone:
          type: string
        timeZone:
          type: string
        department:
          type: string
        manager:
          type: string
        browserAccess:
          type: string
        commandLineAccess:
          type: string
        webServiceAccess:
          type: string
        loginMethod:
          type: string
        impersonate:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: allowed
        permissions:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/PermissionWsData'
        userRoles:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/UserHasRoleWsData'
        tokens:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AuthTokenWsData'
      xml:
        name: user
    UserPreferenceWsData:
      type: object
      properties:
        value:
          type: string
        name:
          $ref: '#/components/schemas/LabelValueWsData'
      xml:
        name: preference
    GlobalVariableWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        value:
          type: string
        description:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        retainSysIds:
          type: boolean
          xml:
            attribute: true
      xml:
        name: variable
    VariableListFilterWsData:
      type: object
      properties:
        variableName:
          type: string
        scope:
          type: string
        taskName:
          type: string
        triggerName:
          type: string
      xml:
        name: variable-query-filter
    SetVariableWsData:
      type: object
      properties:
        scope:
          type: string
        create:
          type: boolean
        trigger:
          type: string
        task:
          type: string
        variable:
          $ref: '#/components/schemas/VariableWsData'
      xml:
        name: set-variable
    VirtualResourceWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        limit:
          type: integer
          format: int32
        summary:
          type: string
        type:
          type: string
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        retainSysIds:
          type: boolean
          xml:
            attribute: true
      xml:
        name: virtualResource
    VirtualResourceSimpleWsData:
      type: object
      properties:
        sysID:
          type: string
        name:
          type: string
        limit:
          type: integer
          format: int32
        description:
          type: string
        type:
          type: string
      xml:
        name: virtual-resource
    WebhookWsData:
      type: object
      properties:
        version:
          type: integer
          format: int32
          xml:
            attribute: true
        sysId:
          type: string
        excludeRelated:
          type: boolean
          xml:
            attribute: true
        exportReleaseLevel:
          type: string
          xml:
            attribute: true
        exportTable:
          type: string
          xml:
            attribute: true
        name:
          type: string
        description:
          type: string
        retainSysIds:
          type: boolean
          xml:
            attribute: true
        opswiseGroups:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: opswiseGroup
        event:
          $ref: '#/components/schemas/LabelValueWsData'
        action:
          type: string
        task:
          type: string
        url:
          type: string
        filter:
          $ref: '#/components/schemas/FilterWsData'
        enabledBy:
          type: string
        enabledTime:
          type: string
        disabledBy:
          type: string
        disabledTime:
          type: string
        executionUser:
          type: string
        status:
          type: string
        statusDescription:
          type: string
        urlParameters:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NameValueWsData'
        httpHeaders:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/NameValueWsData'
        httpAuth:
          type: string
        credentials:
          type: string
        urlParametersFromString:
          type: string
          writeOnly: true
        httpHeadersFromString:
          type: string
          writeOnly: true
        eventBusinessServiceCriteria:
          type: string
        eventBusinessServices:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: businessService
      xml:
        name: webhook
    EnableDisableWebhookWsData:
      type: object
      properties:
        name:
          type: string
          xml:
            attribute: true
        enable:
          type: boolean
          xml:
            attribute: true
      xml:
        name: webhook
    EnableDisableWebhookListWsData:
      type: object
      properties:
        webhooks:
          type: array
          xml:
            name: webhook
          items:
            $ref: '#/components/schemas/EnableDisableWebhookWsData'
      xml:
        name: enable-disable-webhook
    TaskWorkflowEdgePartialWsData:
      type: object
      properties:
        sysId:
          type: string
        workflowId:
          type: string
        condition:
          $ref: '#/components/schemas/ConditionWsData'
        straightEdge:
          type: boolean
        points:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/TaskWorkflowEdgePointWsData'
        sourceId:
          $ref: '#/components/schemas/EdgeVertexWsData'
        targetId:
          $ref: '#/components/schemas/EdgeVertexWsData'
      xml:
        name: workflowEdge
    TaskWorkflowVertexPartialWsData:
      type: object
      properties:
        sysId:
          type: string
        workflowId:
          type: string
        task:
          $ref: '#/components/schemas/Task'
        alias:
          type: string
        vertexId:
          type: string
        vertexX:
          type: string
        vertexY:
          type: string
        conditionExpression:
          $ref: '#/components/schemas/ConditionExpressionWsData'
      xml:
        name: workflowVertex
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer